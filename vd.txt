
COPY public."CodingProblem" (id, code, title, "categoryId", link, description, "timeLimit", "memoryLimit", difficulty, "practicePoint", "totalPoint", "submissionNumber", "acceptedNumber") FROM stdin;
ptest1	ptest1	p test 1	4	/pdf/ptest1	\N	1	256	700	70	0	0	0
atcoder_dp_c	atcoder_dp_c	Atcoder Educational DP Contest C - Vacation	20	\N	<div><p>Kỳ nghỉ hè của Taro bắt đầu vào ngày mai, nên anh ấy đã quyết định lên kế hoạch cho nó ngay bây giờ.</p>\n<p>Kỳ nghỉ bao gồm N ngày. Vào ngày thứ ~i~ ~(1 \\le i \\le N)~, Taro sẽ chọn và tham gia một trong các hoạt động sau:</p>\n<ul>\n<li>A: Bơi ở biển - nhận được ~a_i~ điểm hạnh phúc.</li>\n<li>B: Bắt bọ trên núi - nhận được ~b_i~ điểm hạnh phúc.</li>\n<li>C: Làm bài tập ở nhà - nhận được ~c_i~ điểm hạnh phúc.</li>\n</ul>\n<p>Vì Taro dễ cảm thấy buồn chán nên anh không thể tham gia các hoạt động giống nhau trong hai ngày liên tiếp trở lên.</p>\n<p>Tìm tổng số điểm hạnh phúc <strong>tối đa</strong> mà Taro có thể nhận được.</p>\n<h4>Input</h4>\n<ul>\n<li>Dòng đầu tiên là số nguyên ~N~ ~(1 \\le N \\le 10^5)~</li>\n<li>Dòng thứ ~i~ trong số ~N~ dòng tiếp theo chứa ~3~ số nguyên ~a_i~, ~b_i~, ~c_i~ ~(1 \\le a_i, b_i, c_i \\le 10^4)~ lần lượt là điểm hạnh phúc có thể nhận được khi Taro tham gia hoạt động ~A, B, C~ của ngày thứ ~i~.</li>\n</ul>\n<h4>Output</h4>\n<p>In ra một số nguyên duy nhất là tổng điểm hạnh phúc tối đa mà Taro có thể nhận được.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>3\n10 40 70\n20 50 80\n30 60 90\n</code></pre>\n<h5>Output</h5>\n<pre><code>210\n</code></pre>\n<p>Nếu Taro tham gia các hoạt động theo thứ tự ~C, B, C~, anh ấy sẽ có được ~70+50+90=210~ điểm hạnh phúc</p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>1\n100 10 1\n</code></pre>\n<h5>Output</h5>\n<pre><code>100\n</code></pre>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>7\n6 7 8\n8 8 3\n2 5 2\n7 8 6\n4 6 8\n2 3 4\n7 5 1\n</code></pre>\n<h5>Output</h5>\n<pre><code>46\n</code></pre>\n<p>Taro nên tham gia các hoạt động theo thứ tự : ~C, A, B, A, C, B, A~.</p>\n</div>	1	256	125	12	0	0	0
atcoder_dp_i	atcoder_dp_i	Atcoder Educational DP Contest I - Coins	20	\N	<div><p>Cho ~N~ là một số nguyên dương lẻ. </p>\n<p>Có tất cả ~N~ đồng xu được đánh số ~1,2,...,N~. Xác suất để đồng xu thứ ~i~ ~(1 \\leq i \\leq N)~ lật mặt ngửa khi được tung lên là ~p_{i}~ và xác suất để nó lật mặt sấp khi được tung lên là ~1-p_{i}~. </p>\n<p>Taro sẽ tung hết tất cả ~N~ đồng xu. Tìm xác suất để có số mặt ngửa nhiều hơn số mặt sấp.</p>\n<h4>Input</h4>\n<p>Dòng đầu tiên chứa số nguyên dương lẻ ~N~ ~(1 \\leq N \\leq 2999)~</p>\n<p>Dòng tiếp theo chứa ~N~ số thực ~p_{i}~ ~(0 &lt; p_{i} &lt; 1)~, mỗi số có hai chữ số thập phân.</p>\n<h4>Output</h4>\n<p>In ra xác suất để có số mặt ngửa nhiều hơn số mặt sấp. Kết quả in ra được coi là chính xác nếu sai số tuyệt đối với đáp án không vượt quá ~10^{-9}~.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>3\n0.30 0.60 0.80\n</code></pre>\n<h5>Output</h5>\n<pre><code>0.612\n</code></pre>\n<h5>Giải thích</h5>\n<p>Xác suất để có số mặt ngửa nhiều hơn số mặt sấp bao gồm các trường hợp:</p>\n<ul>\n<li>Xác suất để có <em>(Ngửa, Ngửa, Ngửa)</em> là ~0.3×0.6×0.8=0.144~;</li>\n<li>Xác suất để có <em>(Sấp, Ngửa, Ngửa)</em> là ~0.7×0.6×0.8=0.336~;</li>\n<li>Xác suất để có <em>(Ngửa, Sấp, Ngửa)</em> là ~0.3×0.4×0.8=0.096~;</li>\n<li>Xác suất để có <em>(Ngửa, Ngửa, Sấp)</em> là ~0.3×0.6×0.2=0.036~.</li>\n</ul>\n<p>Do đó, xác suất để có số mặt ngửa nhiều hơn số mặt sấp là ~0.144+0.336+0.096+0.036=0.612~.</p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>1\n0.50\n</code></pre>\n<h5>Output</h5>\n<pre><code>0.5\n</code></pre>\n<h5>Giải thích:</h5>\n<p>Kết quả in ra ví dụ như <code>0.500</code>, <code>0.500000001</code> and <code>0.499999999</code> đều được coi là chình xác.</p>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>5\n0.42 0.01 0.42 0.99 0.42\n</code></pre>\n<h5>Output</h5>\n<pre><code>0.3821815872\n</code></pre>\n</div>	1	256	150	15	0	0	0
atcoder_dp_j	atcoder_dp_j	Atcoder Educational DP Contest J - Sushi	20	\N	<div><p>Cho ~N~ cái đĩa được đánh số ~1,2,...,N~. Trước khi bắt đầu, đĩa thứ ~i~ ~(1 \\leq i \\leq N)~ có ~a_{i}~ ~(1 \\leq a_{i} \\leq 3)~ miếng sushi.</p>\n<p>Taro sẽ thực hiện hành động sau ở mỗi lượt cho tới khi cậu ấy ăn hết tất cả các miếng sushi: </p>\n<ul>\n<li>Đổ một cục xúc xắc ~N~ mặt đánh số ~1,2,…,N~ với cùng xác suất xuất hiện. Gọi ~i~ là số xuất hiện. Nếu có bất kỳ miếng sushi nào trên đĩa thứ ~i~ thì ăn một miếng trong số chúng, nếu đĩa trống thì không làm gì cả.</li>\n</ul>\n<p>Tìm <strong>giá trị kỳ vọng</strong> của số lượt Taro cần thực hiện cho tới khi cậu ấy ăn hết tất cả các miếng sushi.</p>\n<h4>Input</h4>\n<p>Dòng đầu tiên chứa số nguyên dương ~N~ ~(1 \\leq N \\leq 300)~</p>\n<p>Dòng tiếp theo chứa ~N~ số nguyên ~a_{i}~ ~(1 \\leq a_{i} \\leq 3)~</p>\n<h4>Output</h4>\n<p>In ra giá trị kỳ vọng của số lượt Taro cần thực hiện cho tới khi cậu ấy ăn hết tất cả các miếng sushi. Kết quả in ra được coi là chính xác nếu sai số tuyệt đối với đáp án không vượt quá ~10^{-9}~.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>3\n1 1 1\n</code></pre>\n<h5>Output</h5>\n<pre><code>5.5\n</code></pre>\n<h5>Giải thích</h5>\n<ul>\n<li>Đầu tiên, giá trị kỳ vọng của số lượt Taro cần thực hiện để ăn được miếng sushi thứ nhất là ~1~. </li>\n<li>Sau khi ăn miếng thứ nhất, giá trị kỳ vọng của số lượt Taro cần thực hiện để ăn được miếng sushi thứ hai là ~1.5~. </li>\n<li>Sau khi ăn miếng thứ hai, giá trị kỳ vọng của số lượt Taro cần thực hiện để ăn được miếng sushi thứ ba là ~3~. </li>\n</ul>\n<p>Do đó, giá trị kỳ vọng của số lượt Taro cần thực hiện để ăn hết tất cả các miếng sushi là ~1+1.5+3=5.5~.</p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>1\n3\n</code></pre>\n<h5>Output</h5>\n<pre><code>3\n</code></pre>\n<h5>Giải thích:</h5>\n<p>Kết quả in ra ví dụ như <code>3.00</code>, <code>3.000000003</code> and <code>2.999999997</code> đều được coi là chình xác.</p>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>2\n1 2\n</code></pre>\n<h5>Output</h5>\n<pre><code>4.5\n</code></pre>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>10\n1 3 2 3 3 2 3 2 1 3\n</code></pre>\n<h5>Output</h5>\n<pre><code>54.48064457488221\n</code></pre>\n</div>	1	256	250	25	0	0	0
atcoder_dp_a	atcoder_dp_a	Atcoder Educational DP Contest A - Frog 1	20	\N	<div><p>Có ~N~ hòn đá, được đánh số từ ~1~ đến ~N~. Với mỗi chỉ số ~i~ ~(1 \\le i \\le N)~, độ cao của hòn đá thứ ~i~ là ~h_{i}~</p>\n<p>Ban đầu, có một chú ếch đang ngồi ở hòn đá thứ nhất và chú sẽ thực hiện liên tục một loạt các hành động sau: </p>\n<ul>\n<li>Nếu chú đang ngồi ở hòn đá ~i~ chú có thể nhảy đến hòn đá thứ ~i+1~ hoặc ~i+2~. Chú sẽ mất chi phí khi nhảy là ~|h_{i} - h_{j}|~ với ~j~ là hòn đá mà chú ếch nhảy đến. </li>\n</ul>\n<p>Bạn hãy giúp chú ếch tìm chi phí tối thiểu để nhảy từ hòn đá thứ nhất đến hòn đá thứ ~N~ nhé.</p>\n<h4>Input</h4>\n<ul>\n<li>Dòng đầu tiên của dữ liệu vào chứa số nguyên dương ~N~ ~(2 \\le N \\le 10^{5})~, là số lượng hòn đá.</li>\n<li>Dòng thứ hai gồm ~N~ số nguyên ~h_{i}~ ~(1 \\le i \\le N, 1 \\le h_{i} \\le 10^{4})~, là độ cao của hòn đá thứ ~i~.</li>\n</ul>\n<h4>Output</h4>\n<ul>\n<li>Gồm một số nguyên, là chi phí ít nhất để nhảy từ hòn đá thứ nhất đến hòn đá thứ ~N~.</li>\n</ul>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>4\n10 30 40 20\n</code></pre>\n<h5>Output</h5>\n<pre><code>30\n</code></pre>\n<h5>Giải thích</h5>\n<p>Một đường đi tối ưu là: ~1 \\rightarrow 2 \\rightarrow 4~.\nChi phí sẽ là ~|10 - 30| + |30 - 20| = 30~. </p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>2\n10 10\n</code></pre>\n<h5>Output</h5>\n<pre><code>0\n</code></pre>\n<h5>Giải thích</h5>\n<p>Một đường đi tối ưu là: ~1 \\rightarrow 2~.\nChi phí sẽ là ~|10 - 10|= 0~. </p>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>6\n30 10 60 10 60 50\n</code></pre>\n<h5>Output</h5>\n<pre><code>40\n</code></pre>\n<h5>Giải thích</h5>\n<p>Một đường đi tối ưu là: ~1 \\rightarrow 3 \\rightarrow 5 \\rightarrow 6~.\nChi phí sẽ là ~|30−60|+|60−60|+|60−50|=40~.</p>\n</div>	1	256	50	5	0	0	0
atcoder_dp_b	atcoder_dp_b	Atcoder Educational DP Contest B - Frog 2	20	\N	<div><p>Có ~N~ hòn đá, được đánh số từ ~1~ đến ~N~. Với mỗi chỉ số ~i~ ~(1 \\le i \\le N)~, độ cao của hòn đá thứ ~i~ là ~h_{i}~</p>\n<p>Ban đầu, có một chú ếch đang ngồi ở hòn đá thứ nhất và chú sẽ thực hiện liên tục một loạt các hành động sau: </p>\n<ul>\n<li>Nếu chú đang ngồi ở hòn đá ~i~ chú có thể nhảy đến các hòn đá thứ ~i+1~, ~i+2~ ~...~ ~i + K~. Chú sẽ mất phí khi nhảy là ~|h_{i} - h_{j}|~ với ~j~ là hòn đá mà chú ếch nhảy đến. </li>\n</ul>\n<p>Bạn hãy giúp chú ếch tìm chi phí tối thiểu để nhảy từ hòn đá thứ nhất đến hòn đá thứ ~N~ nhé.</p>\n<h4>Input</h4>\n<ul>\n<li>Dòng đầu tiên của dữ liệu vào chứa hai số nguyên dương ~N~ và ~K~ ~(2 \\le N \\le 10^{5}, 1 \\le K \\le 100)~, lần lượt là số lượng hòn đá và giới hạn nhảy của ếch.</li>\n<li>Dòng thứ hai gồm ~N~ số nguyên ~h_{i}~ ~(1 \\le i \\le N, 1 \\le h_{i} \\le 10^{4})~, là độ cao của hòn đá thứ ~i~.</li>\n</ul>\n<h4>Output</h4>\n<ul>\n<li>Gồm một số nguyên, là chi phí ít nhất để nhảy từ hòn đá thứ nhất đến hòn đá thứ ~N~.</li>\n</ul>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>5 3\n10 30 40 50 20\n</code></pre>\n<h5>Output</h5>\n<pre><code>30\n</code></pre>\n<h5>Giải thích</h5>\n<p>Một đường đi tối ưu là: ~1 \\rightarrow 2 \\rightarrow 5~.\nChi phí sẽ là ~|10 - 30| + |30 - 20| = 30~. </p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>3 1\n10 20 10\n</code></pre>\n<h5>Output</h5>\n<pre><code>20\n</code></pre>\n<h5>Giải thích</h5>\n<p>Một đường đi tối ưu là: ~1 \\rightarrow 2 \\rightarrow 3~.\nChi phí sẽ là ~|10 - 20| + |20 - 10| = 20~. </p>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>2 100\n10 10\n</code></pre>\n<h5>Output</h5>\n<pre><code>0\n</code></pre>\n<h5>Giải thích</h5>\n<p>Một đường đi tối ưu là: ~1 \\rightarrow 2~.\nChi phí sẽ là ~|10 - 10|= 0~. </p>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>10 4\n40 10 20 70 80 10 20 70 80 60\n</code></pre>\n<h5>Output</h5>\n<pre><code>40\n</code></pre>\n<h5>Giải thích</h5>\n<p>Một đường đi tối ưu là: ~1 \\rightarrow 4 \\rightarrow 8 \\rightarrow 10~.\nChi phí sẽ là ~|40−70|+|70−70|+|70−60|=40~.</p>\n</div>	1	256	100	10	0	0	0
atcoder_dp_q	atcoder_dp_q	Atcoder Educational DP Contest Q - Flowers	20	\N	<div><p>Có ~N~ bông hoa được xếp thành một hàng trong vườn hoa của Taro. Với mỗi ~i\\,(1 \\le i \\le N)~, chiều cao và vẻ đẹp của bông hoa thứ ~i~ từ trái sang phải lần lượt là ~h_i~ và ~a_i~. Trong vườn hoa, chiều cao của các bông hoa ~h_1, h_2, \\ldots, h_N~ phân biệt đôi một với nhau.</p>\n<p>Taro đang nhổ một số bông hoa đi để những bông hoa còn lại trong vườn thỏa mãn điều kiện sau đây:</p>\n<ul>\n<li>Chiều cao của các bông hoa còn lại tăng dần từ trái sang phải.</li>\n</ul>\n<p>Taro muốn vườn hoa của mình là đẹp nhất có thể (dĩ nhiên, ai mà chẳng muốn như vậy), vậy nên Taro muốn bỏ đi các bông hoa sao cho tổng vẻ đẹp của những bông hoa còn lại là lớn nhất. Tuy nhiên, Taro đang bận làm bài tập nên đã nhờ bạn làm giúp việc này. Hãy giúp Taro và in ra tổng vẻ đẹp lớn nhất có thể của các bông hoa còn lại.</p>\n<h4>Input</h4>\n<p>Dòng thứ nhất chứa một số nguyên ~N\\,(1 \\le N \\le 2 \\times 10^5)~.</p>\n<p>Dòng thứ hai chứa ~N~ số nguyên ~h_i\\,(1 \\le h_i \\le N)~ phân biệt đôi một.</p>\n<p>Dòng thứ ba chứa ~N~ số nguyên ~a_i\\,(1 \\le a_i \\le 10^9)~.</p>\n<h4>Output</h4>\n<p>In ra tổng vẻ đẹp lớn nhất có thể của những bông hoa còn lại.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>4\n3 1 4 2\n10 20 30 40\n</code></pre>\n<h5>Output</h5>\n<pre><code>60\n</code></pre>\n<h5>Giải thích</h5>\n<p>Tổng vẻ đẹp lớn nhất của vườn hoa có thể là ~60~, bằng cách giữ lại các bông hoa thứ hai và thứ tư từ trái qua phải.</p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>1\n1\n10\n</code></pre>\n<h5>Output</h5>\n<pre><code>10\n</code></pre>\n<h5>Giải thích</h5>\n<p>Vườn hoa đã thỏa mãn điều kiện đề bài từ ban đầu.</p>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>5\n1 2 3 4 5\n1000000000 1000000000 1000000000 1000000000 1000000000\n</code></pre>\n<h5>Output</h5>\n<pre><code>5000000000\n</code></pre>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>9\n4 2 5 8 3 6 1 7 9\n6 8 8 4 6 3 5 7 5\n</code></pre>\n<h5>Output</h5>\n<pre><code>31\n</code></pre>\n<h5>Giải thích</h5>\n<p>Tổng vẻ đẹp lớn nhất của vườn hoa có thể là ~31~, bằng cách giữ lại các bông hoa thứ hai, thứ ba, thứ sáu, thứ tám và thứ chín từ trái qua phải.</p>\n<h4>Lưu ý</h4>\n<p>Đáp án có thể vượt quá giới hạn của kiểu biến số nguyên 32-bit.</p>\n</div>	1	256	100	10	0	0	0
atcoder_dp_r	atcoder_dp_r	Atcoder Educational DP Contest R - Walk	20	\N	<div><p>Cho đồ thị có hướng ~G~ có ~N~ đỉnh, được đánh số từ ~1~ tới ~N~, dưới dạng ma trận kề ~a~ là một bảng gồm ~N~ hàng và ~N~ cột.</p>\n<p>Với mỗi cặp số ~i~ và ~j~ ~(1 \\le i,j \\le N)~, số nguyên ~a_{i,j}~ thể hiện rằng có tồn tại hay không một cạnh có hướng từ đỉnh ~i~ tới đỉnh ~j~. Nếu ~a_{i,j} = 1~, thì tồn tại một cạnh có hướng từ đỉnh ~i~ tới đỉnh ~j~; còn nếu ~a_{i,j} = 0~ thì không tồn tại cạnh đó.</p>\n<p>Hãy đếm số lượng đường đi khác nhau có độ dài ~K~ trong đồ thị ~G~, chia lấy số dư cho ~10^9 + 7~. Những con đường đi qua một cạnh nhiều lần cũng sẽ được tính.</p>\n<h4>Input</h4>\n<p>Dòng đầu tiên chứa hai số nguyên ~N\\,(1 \\le N \\le 50)~ và ~K\\,(1 \\le K \\le 10^{18})~.</p>\n<p>~N~ dòng tiếp theo, mỗi dòng chứa ~N~ số nguyên ~a_{i,j}\\,(a_{i,j} \\in \\left \\{ 0, 1 \\right \\}~, ~a_{i, i} = 0)~.</p>\n<h4>Output</h4>\n<p>In ra số lượng đường đi khác nhau có độ dài ~K~ trong đồ thị ~G~.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>4 2\n0 1 0 0\n0 0 1 1\n0 0 0 1\n1 0 0 0\n</code></pre>\n<h5>Output</h5>\n<pre><code>6\n</code></pre>\n<h5>Giải thích</h5>\n<p>Đồ thị ~G~ trông như sau:</p>\n<p><img src="/martor/1767149c-2b49-420a-b1b3-e50c4ece5db6.png" alt=""></p>\n<p>Có sáu đường đi có độ dài ~2~ là:</p>\n<ul>\n<li>~1 \\rightarrow 2 \\rightarrow 3~</li>\n<li>~1 \\rightarrow 2 \\rightarrow 4~</li>\n<li>~2 \\rightarrow 3 \\rightarrow 4~</li>\n<li>~2 \\rightarrow 4 \\rightarrow 1~</li>\n<li>~3 \\rightarrow 4 \\rightarrow 1~</li>\n<li>~4 \\rightarrow 1 \\rightarrow 2~</li>\n</ul>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>3 3\n0 1 0\n1 0 1\n0 0 0\n</code></pre>\n<h5>Output</h5>\n<pre><code>3\n</code></pre>\n<h5>Giải thích</h5>\n<p>Đồ thị ~G~ trông như sau:</p>\n<p><img src="/martor/dc4ccc39-fc1a-4d5d-9eb5-b1d5694609e6.png" alt=""></p>\n<p>Có ba đường đi có độ dài ~3~ là:</p>\n<ul>\n<li>~1 \\rightarrow 2 \\rightarrow 1 \\rightarrow 2~</li>\n<li>~2 \\rightarrow 1 \\rightarrow 2 \\rightarrow 1~</li>\n<li>~2 \\rightarrow 1 \\rightarrow 2 \\rightarrow 3~</li>\n</ul>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>6 2\n0 0 0 0 0 0\n0 0 1 0 0 0\n0 0 0 0 0 0\n0 0 0 0 1 0\n0 0 0 0 0 1\n0 0 0 0 0 0\n</code></pre>\n<h5>Output</h5>\n<pre><code>1\n</code></pre>\n<h5>Giải thích</h5>\n<p>Đồ thị ~G~ trông như sau:</p>\n<p><img src="/martor/3516f570-1458-4ca6-b6b1-509449a75559.png" alt=""></p>\n<p>Có đúng một đường đi có độ dài ~2~ là:</p>\n<ul>\n<li>~4 \\rightarrow 5 \\rightarrow 6~</li>\n</ul>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>1 1\n0\n</code></pre>\n<h5>Output</h5>\n<pre><code>0\n</code></pre>\n<h4>Sample 5</h4>\n<h5>Input</h5>\n<pre><code>10 1000000000000000000\n0 0 1 1 0 0 0 1 1 0\n0 0 0 0 0 1 1 1 0 0\n0 1 0 0 0 1 0 1 0 1\n1 1 1 0 1 1 0 1 1 0\n0 1 1 1 0 1 0 1 1 1\n0 0 0 1 0 0 1 0 1 0\n0 0 0 1 1 0 0 1 0 1\n1 0 0 0 1 0 1 0 0 0\n0 0 0 0 0 1 0 0 0 0\n1 0 1 1 1 0 1 1 1 0\n</code></pre>\n<h5>Output</h5>\n<pre><code>957538352\n</code></pre>\n</div>	1	256	150	15	0	0	0
atcoder_dp_m	atcoder_dp_m	Atcoder Educational DP Contest M - Candies	20	\N	<div><p>Có ~N~ đứa trẻ được đánh số từ ~1~ tới ~N~.</p>\n<p>Bọn trẻ quyết định chia nhau ~K~ viên kẹo. Với mỗi đứa trẻ, đứa thứ ~i (1 \\leq i \\leq N)~ phải nhận được số viên kẹo trong phạm vi từ ~0~ tới ~a_i~. ~K~ viên kẹo phải được dùng hết.</p>\n<p>Hãy đếm số cách bọn trẻ có thể chia nhau những viên kẹo chia lấy dư cho ~10^9 +7~.</p>\n<p>Hai cách chia được gọi là khác nhau nếu tồn tại một đứa trẻ nhận số viên kẹo khác nhau giữa hai cách.</p>\n<h4>Input</h4>\n<p>Dòng đầu tiên là hai số nguyên ~N(1 \\leq N \\leq 100)~ và ~K(0 \\leq K \\leq 10^5)~.</p>\n<p>Dòng thứ hai có ~N~ số nguyên ~a_1,a_2,a_3,...,a_n (0 \\leq a_i \\leq K).~</p>\n<h4>Output</h4>\n<p>Số cách chia kẹo cho bọn trẻ chia lấy dư cho ~10^9 + 7~.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>3 4\n1 2 3\n</code></pre>\n<h5>Output</h5>\n<pre><code>5\n</code></pre>\n<p>Có ~5~ cách để bọn trẻ chia nhau những viên kẹo như sau:</p>\n<ul>\n<li>~(0,1,3)~</li>\n<li>~(0,2,2)~</li>\n<li>~(1,0,3)~</li>\n<li>~(1,1,2)~</li>\n<li>~(1,2,1)~</li>\n</ul>\n<p>Ở mỗi dòng số thứ ~i~ là số lượng kẹo mà đứa trẻ thứ ~i~ nhận được.</p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>1 10\n9\n</code></pre>\n<h5>Output</h5>\n<pre><code>0\n</code></pre>\n<p>Không có cách chia kẹo thỏa mãn.</p>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>2 0\n0 0\n</code></pre>\n<h5>Output</h5>\n<pre><code>1\n</code></pre>\n<p>Chỉ có ~1~ cách chia thõa mãn như sau:</p>\n<ul>\n<li>~(0,0)~</li>\n</ul>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>4 100000\n100000 100000 100000 100000\n</code></pre>\n<h5>Output</h5>\n<pre><code>665683269\n</code></pre>\n<p>Hãy nhớ chia lấy dư kết quả cho ~10^9 + 7~.</p>\n</div>	1	256	200	20	0	0	0
atcoder_dp_d	atcoder_dp_d	Atcoder Educational DP Contest D - Knapsack 1	20	\N	<div><p>Có ~N~ đồ vật được đánh số từ ~1~ đến ~N~. Đồ vật thứ ~i~ ~(1 \\le i \\le N)~ có khối lượng là ~w_i~ và giá trị là ~v_i~.</p>\n<p>Taro quyết định chọn một số đồ vật bỏ vào chiếc túi của anh mang về. Sức chứa tối đa của chiếc túi là ~W~, nghĩa là tổng khối lượng các đồ vật có thể mang tối đa là ~W~.</p>\n<p>Hãy tìm tổng giá trị các đồ vật lớn nhất mà Taro có thể mang về nhà.</p>\n<h4>Input</h4>\n<p>Dòng đầu tiên chứa hai số nguyên ~N~ ~(1 \\le N \\le 100)~ và ~W~ ~(1 \\le W \\le 10^5)~: số lượng đồ vật và sức chứa tối đa của chiếc túi.</p>\n<p>~N~ dòng tiếp theo, mỗi dòng chứa hai số nguyên ~w_i~ ~(1 \\le w_i \\le W)~ và ~v_i~ ~(1 \\le v_i \\le 10^9)~ lần lượt là khối lượng và giá trị của đồ vật thứ ~i~.</p>\n<h4>Output</h4>\n<p>Xuất ra tổng giá trị các đồ vật lớn nhất mà Taro có thể mang về nhà.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>3 8\n3 30\n4 50\n5 60\n</code></pre>\n<h5>Output</h5>\n<pre><code>90\n</code></pre>\n<p>Chọn đồ vật ~1~ và ~3~. Tổng khối lượng sẽ là ~3 + 5 = 8~ và tổng giá trị là ~30 + 60 = 90~.</p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>5 5\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n</code></pre>\n<h5>Output</h5>\n<pre><code>5000000000\n</code></pre>\n<p>Kết quả có thể vượt quá giới hạn kiểu số nguyên ~32~-bit.</p>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>6 15\n6 5\n5 6\n6 4\n6 6\n3 5\n7 2\n</code></pre>\n<h5>Output</h5>\n<pre><code>17\n</code></pre>\n<p>Chọn đồ vật ~2~, ~4~ và ~5~. Tổng khối lượng sẽ là ~5 + 6 + 3 = 14~ và tổng giá trị là ~6 + 6 + 5 = 17~.</p>\n</div>	1	256	150	15	0	0	0
atcoder_dp_e	atcoder_dp_e	Atcoder Educational DP Contest E - Knapsack 2	20	\N	<div><p>Có ~N~ đồ vật được đánh số từ ~1~ đến ~N~. Đồ vật thứ ~i~ ~(1 \\le i \\le N)~ có khối lượng là ~w_i~ và giá trị là ~v_i~.</p>\n<p>Taro quyết định chọn một số đồ vật bỏ vào chiếc túi của anh mang về. Sức chứa tối đa của chiếc túi là ~W~, nghĩa là tổng khối lượng các đồ vật có thể mang tối đa là ~W~.</p>\n<p>Hãy tìm tổng giá trị các đồ vật lớn nhất mà Taro có thể mang về nhà.</p>\n<h4>Input</h4>\n<p>Dòng đầu tiên chứa hai số nguyên ~N~ ~(1 \\le N \\le 100)~ và ~W~ ~(1 \\le W \\le 10^9)~: số lượng đồ vật và sức chứa tối đa của chiếc túi.</p>\n<p>~N~ dòng tiếp theo, mỗi dòng chứa hai số nguyên ~w_i~ ~(1 \\le w_i \\le W)~ và ~v_i~ ~(1 \\le v_i \\le 10^3)~ lần lượt là khối lượng và giá trị của đồ vật thứ ~i~.</p>\n<h4>Output</h4>\n<p>Xuất ra tổng giá trị các đồ vật lớn nhất mà Taro có thể mang về nhà.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>3 8\n3 30\n4 50\n5 60\n</code></pre>\n<h5>Output</h5>\n<pre><code>90\n</code></pre>\n<p>Chọn đồ vật ~1~ và ~3~. Tổng khối lượng sẽ là ~3 + 5 = 8~ và tổng giá trị là ~30 + 60 = 90~.</p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>1 1000000000\n1000000000 10\n</code></pre>\n<h5>Output</h5>\n<pre><code>10\n</code></pre>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>6 15\n6 5\n5 6\n6 4\n6 6\n3 5\n7 2\n</code></pre>\n<h5>Output</h5>\n<pre><code>17\n</code></pre>\n<p>Chọn đồ vật ~2, 4~ và ~5~. Tổng khối lượng sẽ là ~5 + 6 + 3 = 14~ và tổng giá trị là ~6 + 6 + 5 = 17~.</p>\n</div>	1	256	150	15	0	0	0
atcoder_dp_g	atcoder_dp_g	Atcoder Educational DP Contest G - Longest Path	20	\N	<div><p>Cho đồ thị có hướng ~G~ có ~N~ đỉnh và ~M~ cạnh. Các đỉnh được đánh số từ ~1~ tới ~N~, và cạnh có hướng thứ ~i~ ~(1 \\leq i \\leq M)~ đi từ đỉnh ~x_i~ tới đỉnh ~y_i~.</p>\n<p>Đảm bảo rằng đồ thị ~G~ không có chu trình.</p>\n<p>Tìm độ dài đường đi có hướng dài nhất trong đồ thị ~G~, quy ước rằng: <strong>độ dài của một đường đi có hướng là số cạnh nằm trên đường đi đó</strong>.</p>\n<h4>Input</h4>\n<ul>\n<li><p>Dòng đầu tiên chứa hai số nguyên ~N~ và ~M~, lần lượt là số đỉnh và số cạnh của đồ thị đã cho. ~(2 \\leq N \\leq 10^5 , 1 \\leq M \\leq 10^5 ) ~</p></li>\n<li><p>Dòng thứ ~i~ trong số ~M~ dòng tiếp theo, mỗi dòng chứa hai số nguyên ~x_i~ và ~y_i~, biểu diễn cho cạnh thứ ~i~ của đồ thị.</p></li>\n</ul>\n<p>Đảm bảo rằng tất cả các cạnh ~(x_i, y_i)~ bất kì đều phân biệt và đồ thị ~G~ không có chu trình.</p>\n<h4>Outout</h4>\n<p>In ra độ dài của đường đi có hướng dài nhất trong đồ thị ~G~.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>4 5\n1 2\n1 3\n3 2\n2 4\n3 4\n</code></pre>\n<h5>Output</h5>\n<pre><code>3\n</code></pre>\n<h5>Giải thích</h5>\n<p>Đường màu đỏ trong hình dưới đây là đường đi dài nhất:</p>\n<p><img src="/martor/03efbc84-0578-4cb3-8789-c63a4c9c7939.png" alt=""></p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>6 3\n2 3\n4 5\n5 6\n</code></pre>\n<h5>Output</h5>\n<pre><code>2\n</code></pre>\n<h5>Giải thích</h5>\n<p>Đường màu đỏ trong hình dưới đây là đường đi dài nhất:</p>\n<p><img src="/martor/56f1e27b-a2ce-4e9f-a505-e01de4a5d540.png" alt=""></p>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>5 8\n5 3\n2 3\n2 4\n5 2\n5 1\n1 4\n4 3\n1 3\n</code></pre>\n<h5>Output</h5>\n<pre><code>3\n</code></pre>\n<h5>Giải thích</h5>\n<p>Đường màu đỏ trong hình dưới đây là đường đi dài nhất:</p>\n<p><img src="/martor/504ab613-fb6f-4a16-91bf-1c8b7caed45c.png" alt=""></p>\n</div>	1	256	100	10	0	0	0
atcoder_dp_h	atcoder_dp_h	Atcoder Educational DP Contest H - Grid 1	20	\N	<div><p>Cho lưới hình chữ nhật gồm ~H~ hàng và ~W~ cột. Ô ~(i,j)~ được định nghĩa là ô vuông giao giữa hàng thứ ~i~ (từ trên xuống dưới) và cột thứ ~j~ (từ trái qua phải).</p>\n<p>Mỗi ô vuông ~(i,j)~ ~(1 \\leq i \\leq H, 1 \\leq j \\leq W)~ được biểu diễn bởi 1 kí tự ~a_{i,j}~. Nếu ~a_{i,j}~ là <code>.</code>, ô ~(i,j)~ là một ô rỗng. Ngược lại, nếu ~a_{i,j}~ là <code>#</code>, ô ~(i,j)~ chứa vật cản.</p>\n<p>Taro sẽ bắt đầu từ ô ~(1,1)~ đi tới ô ~(H,W)~. Mỗi bước đi, Taro chỉ có thể có di chuyển từ ô hiện tại tới <strong>ô liền kề bên phải</strong> hoặc <strong>ô liền kề phía dưới</strong>, với điều kiện ô đó phải là một ô rỗng.</p>\n<p>Xác định số đường đi mà Taro có thể đi từ ô ~(1,1)~ tới ô ~(H,W)~. Đáp án có thể rất lớn, vì vậy chỉ in ra phần dư của nó khi chia cho ~10^9 + 7~.</p>\n<h4>Input</h4>\n<ul>\n<li><p>Dòng đầu tiên chứa hai số nguyên ~H~ và ~W~, lần lượt là số hàng và số cột của lưới. ~(2 \\leq H, W \\leq 1000)~</p></li>\n<li><p>Dòng thứ ~i~ trong số ~H~ dòng tiếp theo chứa ~W~ kí tự, lần lượt là ~a_{i,1}....a_{i,W}~.</p></li>\n</ul>\n<p>Đảm bảo rằng hai ô ~(1,1)~ và ~(H,W)~ luôn là ô rỗng.</p>\n<h4>Output</h4>\n<p>Gồm một số nguyên duy nhất là phần dư của số đường đi thỏa mãn mà Taro có thể đi khi chia cho ~10^9 + 7~.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>3 4\n...#\n.#..\n....\n</code></pre>\n<h5>Output</h5>\n<pre><code>3\n</code></pre>\n<h5>Giải thích</h5>\n<p>Có ~3~ cách đi như hình sau:</p>\n<p><img src="/martor/7838f514-d97e-4381-8b78-24bc83e5535d.png" alt=""></p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>5 2\n..\n#.\n..\n.#\n..\n</code></pre>\n<h5>Output</h5>\n<pre><code>0\n</code></pre>\n<h5>Giải thích</h5>\n<p>Không có bất cứ cách đi nào thỏa mãn.</p>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>5 5\n..#..\n.....\n#...#\n.....\n..#..\n</code></pre>\n<h5>Output</h5>\n<pre><code>24\n</code></pre>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>20 20\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n</code></pre>\n<h5>Output</h5>\n<pre><code>345263555\n</code></pre>\n</div>	1	256	100	10	0	0	0
atcoder_dp_o	atcoder_dp_o	Atcoder Educational DP Contest O - Matching	20	\N	<div><p>Có ~N~ người đàn ông và ~N~ người phụ nữ đều được đánh số ~1,2,...,N~.</p>\n<p>Với mỗi cặp số ~i,j~ ~(1 \\le i,j \\le N)~, <strong>độ hợp nhau</strong> của người đàn ông ~i~ và người phụ nữ ~j~ là ~a_{i,j}~. Nếu ~a_{i,j} = 1~ thì ông ~i~ và bà ~j~ hợp nhau, nếu ~a_{i,j} = 0 ~ thì ngược lại.</p>\n<p>Taro tìm cách chia ~N~ người đàn ông và ~N~ người phụ nữ thành ~N~ cặp, trong đó mỗi cặp gồm một người đàn ông và một người phụ nữ hợp nhau.</p>\n<p>Hãy tìm số cách khác nhau mà Taro có thể chia, modulo ~10^9+7~</p>\n<h4>Input</h4>\n<p>Dòng đầu tiên gồm số ~N~ ~(1 \\le N \\le 21)~.</p>\n<p>~N~ dòng sau, mỗi dòng gồm ~N~ số nguyên ~0~ hoặc ~1~. Trong đó số thứ ~j~ ở hàng thứ ~i~ là giá trị của ~a_{i,j}~.</p>\n<h4>Output</h4>\n<p>In ra số cách chia cặp thỏa mãn, modulo ~10^9+7~</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>3\n0 1 1\n1 0 1\n1 1 1\n</code></pre>\n<h4>Output</h4>\n<pre><code>3\n</code></pre>\n<p>Có 3 cách thỏa mãn như sau (~(i,j)~ ký hiệu cho cặp giữa ông ~i~ và bà ~j~)</p>\n<ul>\n<li>~(1,2),(2,1),(3,3)~</li>\n<li>~(1,2),(2,3),(3,1)~</li>\n<li>~(1,3),(2,1),(3,2)~</li>\n</ul>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>4\n0 1 0 0\n0 0 0 1\n1 0 0 0\n0 0 1 0\n</code></pre>\n<h4>Output</h4>\n<pre><code>1\n</code></pre>\n<p>Có 1 cách thỏa mãn như sau</p>\n<ul>\n<li>~(1,2),(2,4),(3,1),(4,3)~</li>\n</ul>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>1\n0\n</code></pre>\n<h5>Output</h5>\n<pre><code>0\n</code></pre>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>21\n0 0 0 0 0 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 1\n1 1 1 0 0 1 0 0 0 1 0 0 0 0 1 1 1 0 1 1 0\n0 0 1 1 1 1 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1\n0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 0 0 0 1 1 0\n1 1 0 0 1 0 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0\n0 1 1 0 1 1 1 0 1 1 1 0 0 0 1 1 1 1 0 0 1\n0 1 0 0 0 1 0 1 0 0 0 1 1 1 0 0 1 1 0 1 0\n0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 1 1 1 1 1 1\n0 0 1 0 0 1 0 0 1 0 1 1 0 0 1 0 1 0 1 1 1\n0 0 0 0 1 1 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1\n0 1 1 0 1 1 0 0 1 1 0 0 0 1 1 1 1 0 1 1 0\n0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 1 0 0 0 0 1\n0 1 1 0 0 1 1 1 1 0 0 0 1 0 1 1 0 1 0 1 1\n1 1 1 1 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 0 1\n0 0 0 1 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1\n1 0 1 1 0 1 0 1 0 0 1 0 0 1 1 0 1 0 1 1 0\n0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 1 1 0 0 1\n0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 0 0 1 1 0 1\n0 0 0 0 1 1 1 0 1 0 1 1 1 0 1 1 0 0 1 1 0\n1 1 0 1 1 0 0 1 1 0 1 1 0 1 1 1 1 1 0 1 0\n1 0 0 1 1 0 1 1 1 1 1 0 1 0 1 1 0 0 0 0 0\n</code></pre>\n<h5>Output</h5>\n<pre><code>102515160\n</code></pre>\n<p>Lưu ý kết quả cần phải được in ra theo modulo ~10^9+7~.</p>\n</div>	1	256	150	15	0	0	0
atcoder_dp_p	atcoder_dp_p	Atcoder Educational DP Contest P - Independent Set	20	\N	<div><p>Cho 1 cây có ~N~ đỉnh, được đánh số ~1,2,...,N~. Cây có ~N-1~ cạnh, trong đó cạnh thứ ~i~ nối giữa đỉnh ~x_i~ và ~y_i~.</p>\n<p>Taro sẽ tô màu mỗi đỉnh trên cây bằng ~1~ trong ~2~ màu đen hoặc trắng. Ngoài ra, không được phép tồn tại ~2~ đỉnh kề mà cả ~2~ đỉnh đều có màu đen.</p>\n<p>Tìm số cách tô các đỉnh thỏa mãn, modulo ~10^9+7~</p>\n<h4>Input</h4>\n<p>Dòng đầu tiên gồm số nguyên ~N~ ~(1 \\le N \\le 10^5)~.</p>\n<p>~N-1~ dòng tiếp theo, mỗi dòng gồm ~2~ số nguyên. Trong đó dòng thứ ~i~ chứa ~2~ số nguyên ~x_i~ và ~y_i~.</p>\n<p>Input đảm bảo đồ thị đã cho là cây.</p>\n<h4>Output</h4>\n<p>In ra số cách tô thỏa mãn modulo ~10^9+7~</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>3\n1 2\n2 3\n</code></pre>\n<h5>Output</h5>\n<pre><code>5\n</code></pre>\n<p>Có ~5~ cách tô các đỉnh như sau:\n<img src="/martor/10e1cc76-789b-4957-ae78-b3997f779a69.png" alt=""></p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>4\n1 2\n1 3\n1 4\n</code></pre>\n<h5>Output</h5>\n<pre><code>9\n</code></pre>\n<p>Có ~9~ cách tô các đỉnh như sau:\n<img src="/martor/15407196-58a3-40c8-8a7f-2e62f0e6e956.png" alt=""></p>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>1\n</code></pre>\n<h5>Output</h5>\n<pre><code>2\n</code></pre>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>10\n8 5\n10 8\n6 5\n1 5\n4 8\n2 10\n3 6\n9 2\n1 7\n</code></pre>\n<h5>Output</h5>\n<pre><code>157\n</code></pre>\n</div>	1	256	150	15	0	0	0
atcoder_dp_n	atcoder_dp_n	Atcoder Educational DP Contest N - Slimes	20	\N	<div><p>Có ~N~ cục thạch xếp thành một hàng ngang. Ban đầu, cục thạch thứ ~i~, đếm từ trái sang, có kích thước ~a_i~.</p>\n<p>Taro cố gắng ghép những cục thạch này lại với nhau để tạo thành một cục thạch lớn hơn. Anh ấy sẽ liên tục lặp lại thao tác sau cho đến khi chỉ còn lại một cục thạch duy nhất:</p>\n<ul>\n<li>Taro chọn hai cục thạch kế bên nhau và ghép chúng lại. Cục thạch mới sẽ có kích thước là ~x+y~, ~x~ và ~y~ là kích thước của hai cục thạch được chọn trước khi được ghép. Chi phí phát sinh là ~x+y~ và vị trí tương đối giữa các cục thạch là không thay đổi trong suốt quá trình kết hợp các cục thạch.</li>\n</ul>\n<p>Taro là một người tiết kiệm. Bạn hãy giúp Taro tìm chi phí phát sinh nhỏ nhất có thể.</p>\n<h4>Input</h4>\n<p>Dòng đầu tiên chứa số nguyên ~N(2 \\leq N \\leq 400)~ là số lượng cục thạch.</p>\n<p>Dòng thứ hai chứ ~N~ số nguyên ~a_1,a_2,a_3,...,a_n (1 \\leq a_i \\leq 10^9)~.</p>\n<h4>Output</h4>\n<p>Dòng duy nhất là chi phí phát sinh nhỏ nhất.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>4\n10 20 30 40\n</code></pre>\n<h5>Output</h5>\n<pre><code>190\n</code></pre>\n<p>Taro nên thực hiện như sau (những cục thạch được ghép sẽ được in đậm).</p>\n<ul>\n<li>(<strong>10</strong>, <strong>20</strong>, 30, 40) → (<strong>30</strong>, 30, 40)</li>\n<li>(<strong>30</strong>, <strong>30</strong>, 40) → (<strong>60</strong>, 40)</li>\n<li>(<strong>60</strong>, <strong>40</strong>) → (<strong>100</strong>)</li>\n</ul>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>5\n10 10 10 10 10\n</code></pre>\n<h5>Output</h5>\n<pre><code>120\n</code></pre>\n<p>Taro có thể thực hiện các thao tác như dưới đây:</p>\n<ul>\n<li>(<strong>10</strong>, <strong>10</strong>, 10, 10, 10) → (<strong>20</strong>, 10, 10, 10)</li>\n<li>(20, <strong>10</strong>, <strong>10</strong>, 10) → (20, <strong>20</strong>, 10)</li>\n<li>(20, <strong>20</strong>, <strong>10</strong>) → (20, <strong>30</strong>)</li>\n<li>(<strong>20</strong>, <strong>30</strong>) → (<strong>50</strong>)</li>\n</ul>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>3\n1000000000 1000000000 1000000000\n</code></pre>\n<h5>Output</h5>\n<pre><code>5000000000\n</code></pre>\n<p>Câu trả lời có thể không vừa kiểu <strong>int</strong>.</p>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>6\n7 6 8 6 1 1\n</code></pre>\n<h5>Output</h5>\n<pre><code>68\n</code></pre>\n<p>Taro nên thực hiện các thao tác như sau:</p>\n<ul>\n<li>(7, 6, 8, 6,<strong>1</strong>, <strong>1</strong>) → (7, 6, 8, 6, <strong>2</strong>)</li>\n<li>(7, 6, 8, <strong>6</strong>, <strong>2</strong>) → (7, 6, 8, <strong>8</strong>)</li>\n<li>(<strong>7</strong>, <strong>6</strong>, 8, 8) → (<strong>13</strong>, 8, 8)</li>\n<li>(13, <strong>8, 8</strong>) → (13, <strong>16</strong>)</li>\n<li>(<strong>13</strong>, <strong>16</strong>) → (<strong>29</strong>)</li>\n</ul>\n</div>	1	256	200	20	0	0	0
atcoder_dp_f	atcoder_dp_f	Atcoder Educational DP Contest F - LCS	20	\N	<div><p>Bạn được cho hai xâu ~s~ và ~t~. Hãy tìm xâu con chung dài nhất của hai xâu đó.</p>\n<p><strong>Lưu ý:</strong> <em>Xâu con</em> của xâu ~x~ là xâu được tạo bằng cách xóa ~0~ hoặc một số kí tự thuộc xâu ~x~ và nối các kí tự còn lại mà không thay đổi vị trí của chúng.</p>\n<h4>Input</h4>\n<p>Dòng đầu tiên chứa xâu ~s~ ~(1 \\le \\left| s \\right| \\le 3000)~.</p>\n<p>Dòng thứ hai chứa xâu ~t~ ~(1 \\le \\left| t \\right| \\le 3000)~.</p>\n<p>Các kí tự của ~s~ và ~t~ đều là các chữ cái Tiếng Anh in thường.</p>\n<h4>Output</h4>\n<p>Xuất ra xâu con chung dài nhất của ~s~ và ~t~. Nếu có nhiều xâu thỏa mãn, in ra một xâu bất kì trong các xâu đó.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>axyb\nabyxb\n</code></pre>\n<h5>Output</h5>\n<pre><code>axb\n</code></pre>\n<p>Kết quả là <code>axb</code> và <code>ayb</code> đều được chấp nhận.</p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>aa\nxayaz\n</code></pre>\n<h5>Output</h5>\n<pre><code>aa\n</code></pre>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>a\nz\n</code></pre>\n<h5>Output</h5>\n<pre><code>\n</code></pre>\n<p>Kết quả có thể là xâu rỗng.</p>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>abracadabra\navadakedavra\n</code></pre>\n<h5>Output</h5>\n<pre><code>aaadara\n</code></pre>\n</div>	1	256	150	15	0	0	0
atcoder_dp_y	atcoder_dp_y	Atcoder Educational DP Contest Y - Grid 2	20	\N	<div><p>Có một lưới ô vuông gồm ~H~ hàng và ~W~ cột. Toạ độ ~(i, j)~ biểu thị cho ô vuông ở hàng ~i~ từ trên xuống và cột ~j~ từ trái sang. Trong lưới ô vuông có ~N~ ô ~(r_1,c_1), (r_2,c_2), ...(r_n,c_n)~ là những ô có chướng ngại vật, ngoài những ô này ra tất cả các ô còn lại là các ô trống có thể đi được. Lưới ô vuông đảm bảo rằng ô ~(1,1)~ và ô ~(H, W)~ là ô trống.</p>\n<p>Taro sẽ bắt đầu ở ô ~(1,1)~ và đi đến ô ~(H, W)~ bằng cách di chuyển liên tục sang phải hoặc xuống dưới tới các ô trống liền kề.</p>\n<p>Hãy tìm số cách mà Taro có thể đi từ ô ~(1,1)~ đến ô ~(H, W)~ và in kết quả dưới dạng modulo của ~10^9 + 7~</p>\n<h4>Input</h4>\n<ul>\n<li>Dòng đầu chứa ba số nguyên ~H, W~ và ~N~ lần lượt là số hàng, số cột và số ô có chướng ngại vật.</li>\n<li>~N~ dòng tiếp theo mỗi dòng chứa hai số nguyên ~r_i~, ~c_i~ là toạ độ của chướng ngại vật ~i~. </li>\n</ul>\n<p>Giới hạn: </p>\n<ul>\n<li>~2 \\le H, W \\le 10^5~</li>\n<li>~1 \\le N \\le 3000~</li>\n<li>~1 \\le r_i \\le H~</li>\n<li>~1 \\le c_i \\le W~</li>\n<li>Tất cả các ô ~(r_i, c_i)~ là đôi một phân biệt.</li>\n</ul>\n<h4>Output</h4>\n<p>Số cách đi từ ô ~(1,1)~ đến ô ~(H, W)~ dưới dạng modulo của ~10^9 + 7~</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>3 4 2\n2 2\n1 4\n</code></pre>\n<h4>Output</h4>\n<pre><code>3\n</code></pre>\n<p>Có ~3~ cách đi như hình sau:</p>\n<p><img src="/martor/7838f514-d97e-4381-8b78-24bc83e5535d.png" alt=""></p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>5 2 2\n2 1\n4 2\n</code></pre>\n<h4>Output</h4>\n<pre><code>0\n</code></pre>\n<p>Không có đường đi nào.</p>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>5 5 4\n3 1\n3 5\n1 3\n5 3\n</code></pre>\n<h4>Output</h4>\n<pre><code>24\n</code></pre>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>100000 100000 1\n50000 50000\n</code></pre>\n<h4>Output</h4>\n<pre><code>123445622\n</code></pre>\n<h4>Note</h4>\n<p>Hãy đảm bảo kết quả in ra dưới dạng modulo của ~10^9 + 7~.</p>\n</div>	1	256	725	72	0	0	0
atcoder_dp_l	atcoder_dp_l	Atcoder Educational DP Contest L - Deque	20	\N	<div><p>Taro và Jiro chơi với nhau một trò chơi như sau:</p>\n<p>Cho tập hợp gồm ~N~ số nguyên dương ~a=(a_1,a_2,...,a_N)~. Hai người chơi sẽ lần lượt thực hiện các nước đi sau đến khi ~a~ rỗng, với Taro là người bắt đầu:</p>\n<ul>\n<li>Loại bỏ phần tử đầu tiên hoặc cuối cùng của dãy ~a~. Người chơi đó sẽ kiếm được ~x~ điểm, với ~x~ là phần tử bị loại bỏ.</li>\n</ul>\n<p>Cho ~X~ và ~Y~ lần lượt là số điểm của Taro và Jiro sau khi trò chơi kết thúc. Taro muốn ~X - Y~ lớn nhất có thể, trong Jiro lại muốn làm ~X - Y~ bé nhất có thể. </p>\n<p>Giả sử cả hai người đều chơi tối ưu, tìm giá trị của ~X - Y~.</p>\n<h4>Input:</h4>\n<ul>\n<li>Dòng thứ nhất chứa hai số nguyên dương ~N (1 \\leq N \\leq 3000)~.</li>\n<li>Dòng thứ hai chứa ~N~ số nguyên dương thỏa mãn ~a_1, a_2, a_3, ..., a_N (1 \\leq a_i \\leq 10^9)~.</li>\n</ul>\n<h4>Output:</h4>\n<ul>\n<li>In ra giá trị ~X - Y~ cần tìm. </li>\n</ul>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>4\n10 80 90 30\n</code></pre>\n<h5>Output</h5>\n<pre><code>10\n</code></pre>\n<h5>Giải thích</h5>\n<p>Trò chơi diễn ra như sau nếu hai người đều chơi tối ưu (với phần tử được in đậm là phần tử được chọn):</p>\n<ul>\n<li>Taro: (10, 80, 90, <strong>30</strong>) → (10, 80, 90)</li>\n<li>Jiro: (10, 80, <strong>90</strong>) → (10, 80)</li>\n<li>Taro: (10, <strong>80</strong>) → (10)</li>\n<li>Jiro: (<strong>10</strong>) → ()</li>\n</ul>\n<p>Ở đây, ~X = 30 + 80 = 110~ và ~Y = 90 + 10 = 100~.</p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>3\n10 100 10\n</code></pre>\n<h5>Output</h5>\n<pre><code>-80\n</code></pre>\n<h5>Giải thích:</h5>\n<p>Trò chơi diễn ra như sau nếu hai người đều chơi tối ưu (với phần tử được in đậm là phần tử được chọn):</p>\n<ul>\n<li>Taro: (<strong>10</strong>, 100, 10) → (100, 10)</li>\n<li>Jiro: (<strong>100</strong>, 10) → (10)</li>\n<li>Taro: (<strong>10</strong>) → ()</li>\n</ul>\n<p>Ở đây, ~X=10+10=20~ và ~Y=100~.</p>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>1\n10\n</code></pre>\n<h5>Output</h5>\n<pre><code>10\n</code></pre>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>10\n1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1\n</code></pre>\n<h5>Output</h5>\n<pre><code>4999999995\n</code></pre>\n<h4>Sample 5</h4>\n<h5>Input</h5>\n<pre><code>6\n4 2 9 7 1 5\n</code></pre>\n<h5>Output</h5>\n<pre><code>2\n</code></pre>\n<h5>Giải thích:</h5>\n<p>Trò chơi diễn ra như sau nếu hai người đều chơi tối ưu (với phần tử được in đậm là phần tử được chọn):</p>\n<ul>\n<li>Taro: (4, 2, 9, 7, 1, <strong>5</strong>) → (4, 2, 9, 7, 1)</li>\n<li>Jiro: (<strong>4</strong>, 2, 9, 7, 1) → (2, 9, 7, 1)</li>\n<li>Taro: (2, 9, 7, <strong>1</strong>) → (2, 9, 7)</li>\n<li>Jiro: (2, 9, <strong>7</strong>) → (2, 9)</li>\n<li>Taro: (2, <strong>9</strong>) → (2)</li>\n<li>Jiro: (<strong>2</strong>) → ()</li>\n</ul>\n<p>Ở đây, ~X=5+1+9=15~ và ~Y=4+7+2=13~.</p>\n</div>	1	256	150	15	0	0	0
atcoder_dp_s	atcoder_dp_s	Atcoder Educational DP Contest S - Digit Sum	20	\N	<div><p>Hãy đếm số lượng số nguyên (modulo ~10^9+7~) trong phạm vi từ ~1~ đến ~K~ (tính cả ~1~ và ~K~) thoả mãn:</p>\n<ul>\n<li>Tổng các chữ số trong biểu diễn thập phân của số đó là bội của ~D~.</li>\n</ul>\n<h4>Input</h4>\n<p>Dòng thứ nhất chứa số nguyên ~K~ ~(1 \\le K &lt; 10^{10000})~.</p>\n<p>Dòng thứ hai chứa số nguyên ~D~ ~(1 \\le D \\le 100)~.</p>\n<h4>Output</h4>\n<p>In ra số lượng số nguyên thoả mãn điều kiện, modulo ~10^9+7~.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>30\n4\n</code></pre>\n<h5>Output</h5>\n<pre><code>6\n</code></pre>\n<p>Có ~6~ số nguyên thoả mãn điều kiện là: ~4,8,13,17,22~ và ~26~.</p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>1000000009\n1\n</code></pre>\n<p>Hãy nhớ in ra đáp án chia lấy dư cho ~10^9+7~.</p>\n<h5>Output</h5>\n<pre><code>2\n</code></pre>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>98765432109876543210\n58\n</code></pre>\n<h5>Output</h5>\n<pre><code>635270834\n</code></pre>\n</div>	1	256	150	15	0	0	0
atcoder_dp_t	atcoder_dp_t	Atcoder Educational DP Contest T - Permutation	20	\N	<div><p>Cho xâu ~S~ có độ dài ~N - 1~ gồm 2 kí tự <code>&lt;</code> và <code>&gt;</code>. Tìm số hoán vị (modulo ~10^9 + 7~) ~P_1, P_2, \\dots, P_N~ của ~N~ số nguyên dương đầu tiên thoả mãn với mỗi ~1 \\leq i &lt; N~:</p>\n<ul>\n<li>~P_i &lt; P_{i + 1}~ nếu kí tự thứ ~i~ trong xâu ~S~ là <code>&lt;</code>.</li>\n<li>~P_i &gt; P_{i + 1}~ nếu kí tự thứ ~i~ trong xâu ~S~ là <code>&gt;</code>.</li>\n</ul>\n<h4>Input</h4>\n<ul>\n<li>Dòng đầu tiên chứa số nguyên dương ~N~ (~2 \\leq N \\leq 3000~).</li>\n<li>Dòng thứ hai chứa xâu ~S~ độ dài ~N - 1~ chỉ gồm 2 kí tự <code>&lt;</code> và <code>&gt;</code>.</li>\n</ul>\n<h4>Output</h4>\n<p>In ra số hoán vị thoả mãn điều kiện theo modulo ~10^9 + 7~.</p>\n<h4>Sample test</h4>\n<h5>Sample Input 1</h5>\n<pre><code>4\n&lt;&gt;&lt;\n</code></pre>\n<h5>Sample Output 1</h5>\n<pre><code>5\n</code></pre>\n<h5>Giải thích</h5>\n<p>Có ~5~ hoán vị thoả yêu cầu:</p>\n<ul>\n<li>~(1,3,2,4)~</li>\n<li>~(1,4,2,3)~</li>\n<li>~(2,3,1,4)~</li>\n<li>~(2,4,1,3)~</li>\n<li>~(3,4,1,2)~</li>\n</ul>\n<h5>Sample Input 2</h5>\n<pre><code>5\n&lt;&lt;&lt;&lt;\n</code></pre>\n<h5>Sample Output 2</h5>\n<pre><code>1\n</code></pre>\n<h5>Giải thích</h5>\n<p>Có duy nhất ~1~ hoán vị thoả yêu cầu:</p>\n<ul>\n<li>~(1,2,3,4,5)~</li>\n</ul>\n<h5>Sample Input 3</h5>\n<pre><code>20\n&gt;&gt;&gt;&gt;&lt;&gt;&gt;&gt;&lt;&gt;&gt;&lt;&gt;&gt;&gt;&lt;&lt;&gt;&gt;\n</code></pre>\n<h5>Sample Output 3</h5>\n<pre><code>217136290\n</code></pre>\n<h5>Giải thích</h5>\n<p>Lưu ý kết quả modulo ~10^9 + 7~</p>\n</div>	1	256	250	25	0	0	0
atcoder_dp_u	atcoder_dp_u	Atcoder Educational DP Contest U - Grouping	20	\N	<div><p>Có ~N~ chú thỏ được đánh số ~1, 2, 3,..., N~.</p>\n<p>Sự hoà đồng giữa hai chú thỏ ~i~ và ~j~ ~(1 \\le i, j \\le N)~ được biểu diễn bởi số nguyên ~a_{i,j}~. Trong đó, ~a_{i, i} = 0~ ~(1 \\le i \\le N)~, và ~a_{i, j} = a_{j, i}~ ~(1 \\le i, j \\le N)~.</p>\n<p>Taro đang tìm cách chia ~N~ chú thỏ này vào một số nhóm, sao cho mỗi chú thỏ thuộc <strong>chính xác</strong> một nhóm. Nếu hai chú thỏ ~i~ và ~j~ ~(1 \\le i &lt; j \\le N)~ thuộc cùng một nhóm, Taro được ~a_{i, j}~ điểm.</p>\n<p>Bạn hãy tìm tổng số điểm lớn nhất mà Taro có thể đạt được.</p>\n<h4>Input</h4>\n<p>Dòng đầu tiên chứa số nguyên ~N~ ~(1 \\le N \\le 16)~.</p>\n<p>~N~ dòng tiếp theo, mỗi dòng chứa ~N~ số nguyên, số thứ ~j~ của dòng thứ ~i~ là số nguyên ~a_{i, j}~ ~(|a_{i, j}| \\le 10^9, a_{i, i} = 0, a_{i, j} = a_{j, i})~.</p>\n<h4>Output</h4>\n<p>In ra tổng số điểm lớn nhất mà Taro có thể đạt được.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>3\n0 10 20\n10 0 -100\n20 -100 0\n</code></pre>\n<h5>Output</h5>\n<pre><code>20\n</code></pre>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>2\n0 -10\n-10 0\n</code></pre>\n<h5>Output</h5>\n<pre><code>0\n</code></pre>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>4\n0 1000000000 1000000000 1000000000\n1000000000 0 1000000000 1000000000\n1000000000 1000000000 0 -1\n1000000000 1000000000 -1 0\n</code></pre>\n<h5>Output</h5>\n<pre><code>4999999999\n</code></pre>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>16\n0 5 -4 -5 -8 -4 7 2 -4 0 7 0 2 -3 7 7\n5 0 8 -9 3 5 2 -7 2 -7 0 -1 -4 1 -1 9\n-4 8 0 -9 8 9 3 1 4 9 6 6 -6 1 8 9\n-5 -9 -9 0 -7 6 4 -1 9 -3 -5 0 1 2 -4 1\n-8 3 8 -7 0 -5 -9 9 1 -9 -6 -3 -8 3 4 3\n-4 5 9 6 -5 0 -6 1 -2 2 0 -5 -2 3 1 2\n7 2 3 4 -9 -6 0 -2 -2 -9 -3 9 -2 9 2 -5\n2 -7 1 -1 9 1 -2 0 -6 0 -6 6 4 -1 -7 8\n-4 2 4 9 1 -2 -2 -6 0 8 -6 -2 -4 8 7 7\n0 -7 9 -3 -9 2 -9 0 8 0 0 1 -3 3 -6 -6\n7 0 6 -5 -6 0 -3 -6 -6 0 0 5 7 -1 -5 3\n0 -1 6 0 -3 -5 9 6 -2 1 5 0 -2 7 -8 0\n2 -4 -6 1 -8 -2 -2 4 -4 -3 7 -2 0 -9 7 1\n-3 1 1 2 3 3 9 -1 8 3 -1 7 -9 0 -6 -8\n7 -1 8 -4 4 1 2 -7 7 -6 -5 -8 7 -6 0 -9\n7 9 9 1 3 2 -5 8 7 -6 3 0 1 -8 -9 0\n</code></pre>\n<h5>Output</h5>\n<pre><code>132\n</code></pre>\n<h4>Note</h4>\n<p><strong>Các cách chia ở từng test ví dụ:</strong></p>\n<ul>\n<li>Ví dụ ~1~: ~\\{1, 3\\},\\{2\\}~.</li>\n<li>Ví dụ ~2~: ~\\{1\\},\\{2\\}~.</li>\n<li>Ví dụ ~3~: ~\\{1,2,3,4\\}~.</li>\n</ul>\n<p>Lưu ý rằng đáp án có thể vượt quá phạm vi giá trị của kiểu số nguyên 32-bit.</p>\n</div>	1	256	175	17	0	0	0
atcoder_dp_w	atcoder_dp_w	Atcoder Educational DP Contest W - Intervals	20	\N	<div><p>Xét một xâu có chiều dài ~N~ bao gồm các chữ số <code>0</code> và <code>1</code>. Điểm của xâu được tính như sau:</p>\n<ul>\n<li>Với mỗi số nguyên ~i~ (~1~ ≤ ~i~ ≤ ~M~), tổng số điểm của xâu được tăng thêm ~a_i~ nếu như xâu con bao gồm các kí tự từ ~l_i~ đến ~r_i~ (kể cả biên) có ít nhất một kí tự <code>1</code>.</li>\n</ul>\n<p>Với mọi xâu độ dài ~N~, số điểm cao nhất có thể đạt được là bao nhiêu?</p>\n<h4>Input</h4>\n<ul>\n<li>Dòng đầu chứa hai số nguyên ~N, M~ (~1 \\le N \\le 2 \\cdot 10^5~ và ~1 \\le M \\le 2 \\cdot 10^5~).</li>\n<li>~M~ dòng tiếp theo, mỗi dòng chứa ba số nguyên ~l_i, r_i, a_i~ (~1 \\le l_i \\le r_i \\le N~ và ~\\mid a_i\\mid \\le 10^9~).</li>\n</ul>\n<h4>Output</h4>\n<p>Số điểm tối đa mà xâu có thể đạt được.</p>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>5 3\n1 3 10\n2 4 -10\n3 5 10\n</code></pre>\n<h5>Output</h5>\n<pre><code>20\n</code></pre>\n<h5>Giải thích</h5>\n<p>Điểm cho xâu <code>10001</code> là ~a_1 + a_3 = 10 + 10 = 20~.</p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>3 4\n1 3 100\n1 1 -10\n2 2 -20\n3 3 -30\n</code></pre>\n<h5>Output</h5>\n<pre><code>90\n</code></pre>\n<h5>Giải thích</h5>\n<p>Điểm cho xâu <code>100</code> là ~a_1 + a_2 = 100 + (-10) = 90~.</p>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>1 1\n1 1 -10\n</code></pre>\n<h5>Output</h5>\n<pre><code>0\n</code></pre>\n<h5>Giải thích</h5>\n<p>Điểm cho xâu <code>0</code> là ~0~.</p>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>1 5\n1 1 1000000000\n1 1 1000000000\n1 1 1000000000\n1 1 1000000000\n1 1 1000000000\n</code></pre>\n<h5>Output</h5>\n<pre><code>5000000000\n</code></pre>\n<p>Kết quả có thể không phù hợp với số nguyên có định dạng 32-bit.</p>\n<h4>Sample 5</h4>\n<h5>Input</h5>\n<pre><code>6 8\n5 5 3\n1 1 10\n1 6 -8\n3 6 5\n3 4 9\n5 5 -2\n1 3 -6\n4 6 -7\n</code></pre>\n<h5>Output</h5>\n<pre><code>10\n</code></pre>\n<h5>Giải thích</h5>\n<p>Điểm cho xâu <code>101000</code> là ~a_2 + a_3 + a_4 + a_5 + a_7 = 10 + (-8) + 5 + 9 + (-6) = 10~.</p>\n</div>	1	256	500	50	0	0	0
atcoder_dp_x	atcoder_dp_x	Atcoder Educational DP Contest X - Tower	20	\N	<div><p>Cho ~N~ khối khác nhau được đánh số từ ~1~ tới ~N~. Khối thứ ~i~ (~1 \\le i \\le N~) có cân nặng ~w_i~, có sức chịu nặng ~s_i~, và có giá trị ~v_i~.</p>\n<p>Taro quyết định xây một toà tháp bằng một số khối lấy từ ~N~ khối đã cho và xếp chồng chúng lên nhau theo một thứ tự nhất định. Toà tháp phải thoả mãn điều kiện sau:</p>\n<ul>\n<li>Tổng khối lượng các khối được đặt trên khối thứ ~i~ không được phép lớn hơn ~s_i~.</li>\n</ul>\n<p>Tìm tổng giá trị <strong>tối đa</strong> mà toà tháp có thể đạt được. </p>\n<h4>Input</h4>\n<ul>\n<li>Dòng đầu tiên chứa số nguyên ~N~.</li>\n<li>~N~ dòng tiếp theo, dòng thứ ~i~ chứa 3 số nguyên ~w_i, s_i, v_i~ lần lượt là cân nặng, sức chịu nặng và giá trị của khối thứ ~i~.</li>\n</ul>\n<h4>Output</h4>\n<p>Tổng giá trị tối đa mà toà tháp có thể đạt được.</p>\n<h4>Giới hạn:</h4>\n<ul>\n<li>Mọi giá trị từ input đều là số nguyên.</li>\n<li>~1 \\le N \\le 10^3~</li>\n<li>~1 \\le w_i, s_i \\le 10^4~</li>\n<li>~1 \\le v_i \\le 10^9~</li>\n</ul>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>3\n2 2 20\n2 1 30\n3 1 40\n</code></pre>\n<h5>Output</h5>\n<pre><code>50\n</code></pre>\n<h5>Giải thích</h5>\n<p>Nếu như khối ~2~ xếp chồng lên khối ~1~, ta được tổng giá trị tối đa của toà tháp là ~30 + 20 = 50~.</p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>4\n1 2 10\n3 1 10\n2 4 10\n1 6 10\n</code></pre>\n<h5>Output</h5>\n<pre><code>40\n</code></pre>\n<h5>Giải thích</h5>\n<p>Các khối ~1, 2, 3, 4~ được xếp theo thứ tự từ đỉnh tới đáy.</p>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>5\n1 10000 1000000000\n1 10000 1000000000\n1 10000 1000000000\n1 10000 1000000000\n1 10000 1000000000\n</code></pre>\n<h5>Output</h5>\n<pre><code>5000000000\n</code></pre>\n<p>Kết quả có thể không phù hợp với số nguyên có định dạng 32-bit.</p>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>8\n9 5 7\n6 2 7\n5 7 3\n7 8 8\n1 9 6\n3 3 3\n4 1 7\n4 5 5\n</code></pre>\n<h5>Output</h5>\n<pre><code>22\n</code></pre>\n<h5>Giải thích</h5>\n<p>Chúng ta có thể xếp các khối ~5, 6, 8, 4~ theo thứ tự từ đỉnh tới đáy.</p>\n</div>	1	256	625	62	0	0	0
atcoder_dp_z	atcoder_dp_z	Atcoder Educational DP Contest Z - Frog 3	20	\N	<div><p>Có ~N~ hòn đá được đánh số từ 1 tới ~N~. Hòn đá thứ ~i~ ~(1 \\le i \\le N)~ có chiều cao ~h_i~. Ngoài ra ta có ~h_1 &lt; h_2 &lt; ... &lt; h_n~.</p>\n<p>Có một chú ếch khởi đầu ở hòn đá thứ ~1~ và nó sẽ lặp lại các hành động như sau để đến được hòn đá thứ ~N~: </p>\n<ul>\n<li>Nếu nó đang ở hòn đá ~i~, nó có thể nhảy đến bất kì hòn đá: ~i + 1, i + 2, ... N~ và mất chi phí là ~(h_j - h_i)^2 + C~ với ~j~ là hòn đá mà nó nhảy đến.</li>\n</ul>\n<p>Hãy tìm chi phí nhỏ nhất có thể để chú ếch đến được hòn đá thứ ~N~.</p>\n<h4>Input</h4>\n<ul>\n<li>Dòng đầu chứa hai số nguyên ~N~ và ~C ~ lần lượt là số viên đá và hệ số chi phí. </li>\n<li>Dòng tiếp theo chứa ~N~ số nguyên lần lượt là chiều cao của các hòn đá.</li>\n</ul>\n<p>Giới hạn: </p>\n<ul>\n<li>~1 \\leq N \\leq 2 \\times 10^5~</li>\n<li>~1 \\leq C \\leq 2 \\times 10^{12}~</li>\n<li>~1 \\leq h_1 &lt; h_2 &lt; ... &lt; h_n \\leq 10^6~</li>\n</ul>\n<h4>Output</h4>\n<p>Ghi ra chi phí nhỏ nhất có thể.</p>\n<h4>Sample 1</h4>\n<h5>Input 1</h5>\n<pre><code>5 6\n1 2 3 4 5\n</code></pre>\n<h5>Output 1</h5>\n<pre><code>20\n</code></pre>\n<p>Nếu chú ếch nhảy lần lượt lên các hòn đá ~1 \\rightarrow 3 \\rightarrow 5~ thì chi phí sẽ là: ~((3-1) ^ 2 + 6) + ((5-3)^2 + 6) = 20~.</p>\n<h4>Sample 2</h4>\n<h5>Input 2</h5>\n<pre><code>2 1000000000000\n500000 1000000\n</code></pre>\n<h5>Output 2</h5>\n<pre><code>1250000000000\n</code></pre>\n<h4>Sample 3</h4>\n<h5>Input 3</h5>\n<pre><code>8 5\n1 3 4 5 10 11 12 13\n</code></pre>\n<h5>Output 3</h5>\n<pre><code>62\n</code></pre>\n<p>Nếu chú ếch nhảy lần lượt lên các hòn đá ~1 \\rightarrow 2 \\rightarrow 4 \\rightarrow 5 \\rightarrow 8~ thì chi phí sẽ là: ~((3-1) ^ 2 + 5) + ((5-3) ^ 2 + 5) + ((10-5) ^ 2 + 5) + ((13-10) ^ 2 + 5) = 62~.</p>\n<h4>Note</h4>\n<p>Kết quả có thể vượt quá kiểu số nguyên 32 bit.</p>\n</div>	1	256	725	72	0	0	0
atcoder_dp_v	atcoder_dp_v	Atcoder Educational DP Contest V - Subtree	20	\N	<div><p>Cây là đồ thị vô hướng, liên thông và không có chu trình. Một cây ~N~ đỉnh sẽ có ~(N - 1)~ cạnh. Cho một cây có ~N~ đỉnh, các đỉnh được đánh số ~1, 2, ..., N~. Cạnh thứ ~i~ ~(1 \\le i \\le (N - 1))~ kết nối 2 đỉnh ~x_{i}~ và ~y_{i}~.</p>\n<p>Taro quyết định tô mỗi đỉnh của cây bởi một trong hai màu trắng hoặc đen, sao cho với hai đỉnh được tô đen bất kì, tất cả các đỉnh trên đường đi giữa hai đỉnh đó cũng được tô đen.</p>\n<p>Bạn được cho một số nguyên dương ~M~. Với mỗi ~v~ ~(1 \\le v \\le N)~, hãy trả lời câu hỏi dưới đây:</p>\n<p>Giả sử đỉnh ~v~ đã được tô màu đen, có bao nhiêu cách tô ~(n - 1)~ đỉnh còn lại để thỏa mãn điều kiện trên? Do đáp án có thể rất lớn, in ra kết quả modulo ~M~.</p>\n<h4>Input</h4>\n<p>Dòng đầu tiên chứa 2 số ~N~ và ~M~ - số đỉnh và modulo.</p>\n<p>Dòng thứ ~i~ trong ~(N - 1)~ dòng tiếp theo chứa ~2~ số ~x_{i}~ và ~y_{i}~ - ~2~ đỉnh được nối bởi cạnh thứ ~i~.</p>\n<h4>Output</h4>\n<p>In ra ~N~ dòng, dòng thứ ~i~ in ra đáp án cho câu hỏi trên với đỉnh ~i~ theo modulo ~M~. </p>\n<h4>Giới hạn</h4>\n<ul>\n<li>Tất cả các giá trị trong input là số nguyên.</li>\n<li>~1 \\le N \\le 10^5~</li>\n<li>~2 \\le M \\le 10^9~ (lưu ý rằng ~M~ không nhất thiết phải là số nguyên tố)</li>\n<li>~1 \\le x_{i}, y_{i} \\le N~ ~(1 \\le i \\le (N - 1))~</li>\n<li>Đồ thị đã cho là cây.</li>\n</ul>\n<h4>Sample Input 1</h4>\n<pre><code>3 100\n1 2\n2 3\n</code></pre>\n<h4>Sample Output 1</h4>\n<pre><code>3\n4\n3\n</code></pre>\n<h4>Sample Input 2</h4>\n<pre><code>4 100\n1 2\n1 3\n1 4\n</code></pre>\n<h4>Sample Output 2</h4>\n<pre><code>8\n5\n5\n5\n</code></pre>\n<h4>Sample Input 3</h4>\n<pre><code>1 100\n</code></pre>\n<h4>Sample Output 3</h4>\n<pre><code>1\n</code></pre>\n<h4>Sample Input 4</h4>\n<pre><code>10 2\n8 5\n10 8\n6 5\n1 5\n4 8\n2 10\n3 6\n9 2\n1 7\n</code></pre>\n<h4>Sample Output 4</h4>\n<pre><code>0\n0\n1\n1\n1\n0\n1\n0\n1\n1\n</code></pre>\n<h4>Giải thích test đề thứ nhất</h4>\n<p><img src="/martor/ab400aac-73d5-40a6-918a-29432986d5cd.png" alt=""></p>\n<p>Trên đây là tất cả những cách tô màu thỏa mãn điều kiện đề bài.\n(Cách tô đỉnh ~1~ và ~3~ đen không thỏa mãn do đồ thị tạo bởi ~2~ đỉnh ~1~ và ~3~ không liên thông)</p>\n<p>Trong ~7~ cách trên, có</p>\n<ul>\n<li>~3~ cách có đỉnh ~1~ được tô màu đen</li>\n<li>~4~ cách có đỉnh ~2~ được tô màu đen</li>\n<li>~3~ cách có đỉnh ~3~ được tô màu đen</li>\n</ul>\n</div>	1	256	300	30	0	0	0
atcoder_dp_k	atcoder_dp_k	Atcoder Educational DP Contest K - Stones	20	\N	<div><p>Cho tập hợp gồm ~N~ số nguyên dương ~A=\\{a_1,a_2,...,a_N\\}~. Taro và Jiro chơi với nhau một trò chơi như sau:</p>\n<p>Ban đầu, chúng ta có một đống đá chứa ~K~ viên đá. Hai người chơi sẽ lần lượt thực hiện 1 nước đi như sau, với Taro là người bắt đầu:</p>\n<ul>\n<li>Chọn một phần tử ~x~ của tập ~A~, và loại bỏ đi chính xác ~x~ viên đá từ đống đá.</li>\n</ul>\n<p>Người nào không thể thực hiện được nước đi, thì đó là người thua cuộc. Giả sử cả hai người đều chơi tối ưu, xác định người chiến thắng.</p>\n<h4>Input:</h4>\n<ul>\n<li>Dòng thứ nhất chứa hai số nguyên dương ~N, K (1 \\leq N \\leq 100,1 \\leq K \\leq 10^5).~</li>\n<li>Dòng thứ hai chứa ~N~ số nguyên dương thỏa mãn ~1\\leq a_1 \\lt a_2 \\lt a_3 \\lt ... \\lt a_N \\leq K.~</li>\n</ul>\n<h4>Output:</h4>\n<ul>\n<li>Nếu Taro là người thắng cuộc, in ra <code>First</code>, ngược lại nếu Jiro thắng in ra <code>Second</code>.</li>\n</ul>\n<h4>Sample 1</h4>\n<h5>Input</h5>\n<pre><code>2 4\n2 3\n</code></pre>\n<h5>Output</h5>\n<pre><code>First\n</code></pre>\n<h5>Giải thích</h5>\n<p>Nếu Taro loại 3 viên đá, Jiro không thể thực hiện nước đi. Thế nên, Taro thắng.</p>\n<h4>Sample 2</h4>\n<h5>Input</h5>\n<pre><code>2 5\n2 3\n</code></pre>\n<h5>Output</h5>\n<pre><code>Second\n</code></pre>\n<h5>Giải thích:</h5>\n<p>Bất kể Taro làm điều gì thì Jiro vẫn thắng vì:</p>\n<ul>\n<li>Nếu Taro loại 2 viên đá, Jiro có thể loại 3 viên đá khiến Taro không thể thực hiện nước đi.</li>\n<li>Nếu Taro loại 3 viên đá, Jiro có thể loại 2 viên đá khiến Taro không thể thực hiện nước đi.</li>\n</ul>\n<h4>Sample 3</h4>\n<h5>Input</h5>\n<pre><code>2 7\n2 3\n</code></pre>\n<h5>Output</h5>\n<pre><code>First\n</code></pre>\n<h5>Giải thích:</h5>\n<p>Taro nên loại 2 viên đá. Sau đó, bất kể Jiro làm điều gì thì Taro vẫn thắng vì:</p>\n<ul>\n<li>Nếu Jiro loại 2 viên đá, Taro có thể loại 3 viên đá khiến Jiro không thể thực hiện nước đi.</li>\n<li>Nếu Jiro loại 3 viên đá, Taro có thể loại 2 viên đá khiến Jiro không thể thực hiện nước đi.</li>\n</ul>\n<h4>Sample 4</h4>\n<h5>Input</h5>\n<pre><code>3 20\n1 2 3\n</code></pre>\n<h5>Output</h5>\n<pre><code>Second\n</code></pre>\n<h4>Sample 5</h4>\n<h5>Input</h5>\n<pre><code>3 21\n1 2 3\n</code></pre>\n<h5>Output</h5>\n<pre><code>First\n</code></pre>\n<h4>Sample 6</h4>\n<h5>Input</h5>\n<pre><code>1 100000\n1\n</code></pre>\n<h5>Output</h5>\n<pre><code>Second\n</code></pre>\n</div>	1	256	250	25	0	0	0
\.