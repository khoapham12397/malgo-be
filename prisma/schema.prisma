// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum admin_type {
  regular_user
  admin
  super_admin
}
enum ProblemRuleType {
  acm
  oi
}
enum ChatMessageType {
  message_p2p
  message_group
  message_group_post
}

enum ChatSessionType {
  p2p 
  group
}



model User {
  username    String       @id @unique
  email       String       @unique
  create_time DateTime     @default(now())
  admin_type  admin_type   @default(regular_user)
  is_disabled Boolean      @default(false)
  auth0_id    String?      @unique
  codingProblems AuthorCodingProblem[]
  authorMathProblems AuthorMathProblem[]
  threads Thread[]
  comments Comment[]
  threadLiked UserLikeThread[]
  commentLiked UserLikeComment[]
  UserProfile UserProfile?
  mathNotes MathNote[]
  mathSolutions MathSolution[]
  mathProbSetList MathProblemSet[]
  myFriendReqs FriendRequest[] @relation(name: "myrequest")
  otherFriendReqs FriendRequest[] @relation(name: "otherrequest")
  createdGroup  Group[]
  joinedGroups UserGroupRel[]
  posts GroupPost[]
  chatMessages ChatMessage[]
  chatSessions ChatSessionUser[]
  groupPostMessages GroupPostMessage[]
  @@index([username])

}

model UserRating {
  username String @id 
  rating Int
}

model FriendShip { 
  id String @id @default(uuid())
  username1 String 
  username2 String
  establishedAt DateTime @default(now())
  @@index([username1])
  @@index([username2])
}

model FriendRequest {
  id String @id @default(uuid())
  sender User @relation(fields: [senderId], references: [username],name: "myrequest")
  senderId String 
  reciever User @relation(fields: [recieverId], references: [username], name: "otherrequest")
  recieverId String
  disable Boolean @default(false)
  @@index([senderId])
  @@index([recieverId])

}

model SharePTP {
  id String @id
  resourceId String 
  resourceType String  
  senderId String
  receiverId String 
  resourceLink String?
  look Boolean @default(false)
  createdAt DateTime @default(now())
  @@index([receiverId])  
}

model Group {
  id String @id @default(uuid())
  name String @db.VarChar(255) 
  creatorId String
  creator User @relation(fields: [creatorId], references: [username])
  users UserGroupRel[]
  posts GroupPost[]
  generalChatSessionId String?

  createdAt DateTime @default(now())
}


model UserGroupRel {
  username String @db.VarChar(255)
  groupId String 
  joinedAt DateTime
  user User @relation(fields: [username], references: [username])
  group Group @relation(fields: [groupId], references: [id])

  @@id([username, groupId])
}


model UserProfile {
  id                   String  @id @default(uuid())
  real_name            String?
  avatar               String?
  blog                 String?
  github               String?
  school               String?
  major                String?
  language             String?
  accepted_number      Int?
  total_score          Int?
  total_practice_score Int?
  submission_number    Int?
  rating               Int?
  user     User   @relation(fields: [username], references: [username])
  username String @unique
}
model CodingProblemCategory {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  codingProblems CodingProblem[]
}

// many to many 
model CodingProblemTag {
  id             Int                @id @default(autoincrement())
  name           String             @db.VarChar
  codingProblems TagCodingProblem[]
}
model CodeforcesTag {
  id String @id
  name String
  parentId String?
  problems CodefocesTagProblem[]
}
model CodefocesTagProblem {
  problemId String 
  problem CodingProblem @relation(fields:[problemId], references:[id])
  codeforcesTagId String 
  codeforcesTag CodeforcesTag @relation(fields:[codeforcesTagId], references:[id])

  @@id([problemId, codeforcesTagId])
}
model CodingProblem {
  id               String                @id @db.VarChar
  code             String                @unique @db.VarChar
  title            String                @db.VarChar
  category         CodingProblemCategory @relation(fields: [categoryId], references: [id])
  categoryId       Int
  link             String?               @db.VarChar
  description      String?
  timeLimit        Int                   @default(1)
  memoryLimit      Int                   @default(256)
  difficulty       Int                   @default(400)
  practicePoint    Int                   @default(40)
  totalPoint       Int                   @default(0)
  submissionNumber Int                   @default(0)
  acceptedNumber   Int                   @default(0)
  authors          AuthorCodingProblem[]
  tags             TagCodingProblem[]
  codeforcesTag CodefocesTagProblem[]
  testCases Testcase[]
  contestId String?
  contest Contest? @relation(fields: [contestId], references: [id])
  visibleFrom DateTime?
}


model AuthorCodingProblem {
  user            User          @relation(fields: [username], references: [username])
  username        String        @db.VarChar
  codingProblem   CodingProblem @relation(fields: [codingProblemId], references: [id])
  codingProblemId String        @db.VarChar

  @@id([username, codingProblemId])
}

model TagCodingProblem {
  tag             CodingProblemTag @relation(fields: [tagId], references: [id])
  tagId           Int
  codingProblem   CodingProblem    @relation(fields: [codingProblemId], references: [id])
  codingProblemId String           @db.VarChar

  @@id([tagId, codingProblemId])
}


model Thread {
  id String @id @db.VarChar 
  author User @relation(fields: [authorId] ,references: [username])
  authorId String @db.VarChar
  parentId String? @db.VarChar
  title String @db.VarChar
  summary String @db.VarChar 
  published Boolean
  createdAt DateTime @default(now())
  lastUpdateAt DateTime @default(now())
  publishedAt DateTime @default(now())
  content String
  totalComments Int @default(0)
  totalRootComments Int @default(0)
  likes Int @default(0)
  views Int @default(0)
  comments Comment[]
  category ThreadCategory? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  tags ThreadTagRel[]
  userLikes UserLikeThread[]
}

model ThreadCategory { 
  id Int @id @default(autoincrement())
  parentId String? @db.VarChar 
  title String @db.VarChar 
  threads Thread[]
}
model ThreadTag {
  id String @id @db.VarChar 
  title String @db.VarChar 
  threads ThreadTagRel[]
}

model ThreadTagRel {
  threadId String @db.VarChar 
  thread Thread @relation(fields: [threadId] , references: [id] )
  tagId String @db.VarChar
  tag ThreadTag @relation(fields: [tagId],references: [id])
  @@id([threadId,tagId])
}

model UserLikeThread {
  username String 
  user User @relation(fields: [username], references: [username])
  threadId String 
  thread Thread @relation(fields: [threadId], references: [id])
  disable Boolean @default(false)
  @@id([username,threadId])
}
model UserLikeComment {
  username String 
  user User @relation(fields: [username], references: [username])
  commentId String 
  comment Comment @relation(fields: [commentId], references: [id])
  disable Boolean @default(false)
  @@id([username,commentId])
}
model Comment {
  id String @id @db.VarChar
  thread Thread @relation(fields: [threadId], references: [id])
  threadId String @db.VarChar
  parentId String? @db.VarChar
  rootId String @db.VarChar
  totalChildren Int @default(0)
  depth Int @default(0)
  likes Int @default(0)
  parentUsername String? @db.VarChar
  creatorId String @db.VarChar
  creator User @relation(fields: [creatorId], references: [username])
  published Boolean @default(true)
  createdAt DateTime @default(now())
  content String  
  usersLiked UserLikeComment[]
}
model MathProblemCategory {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  mathProblems MathProblem[]
}

model MathProblemTag {
  id             Int                @id @default(autoincrement())
  name           String             @db.VarChar
  mathProblems TagMathProblem[]
  parentId Int? @default(0)
  nextSibling Int? @default(0)
  prevSibling Int? @default(0)
}

model MathProblem {
  id String @id @db.VarChar
  title            String                @db.VarChar
  category         MathProblemCategory @relation(fields: [categoryId], references: [id])
  categoryId       Int
  link             String?               @db.VarChar
  description      String?
  hint String? 
  difficulty       Int                   @default(400)
  practicePoint    Int?                   @default(40)
  totalPoint       Int?                   @default(0)
  prevProblems String?
  nextProblems String?
  numSolution Int @default(0)
  numCheckedSolution Int @default(0)

  authors          AuthorMathProblem[]
  tags             TagMathProblem[]
  mathNotes MathNote[]
  mathSolutions MathSolution[]
  problemSet MathSetProbRel[]
}

model MathProblemSet {
  id String @id @db.VarChar
  title String
  creatorId String @db.VarChar
  creator User @relation(fields: [creatorId], references: [username])
  numberProb Int
  problems MathSetProbRel[]
}

model MathSetProbRel {
  problemId String @db.VarChar
  setId String @db.VarChar 
  problem MathProblem @relation(fields: [problemId], references: [id])
  mathProbSet MathProblemSet @relation(fields: [setId],references: [id])

  order String @db.VarChar
  @@id([setId, problemId])
}

model AuthorMathProblem {
  user User @relation(fields: [username], references: [username])
  username String @db.VarChar 
  mathProblem MathProblem @relation(fields: [mathProblemId], references: [id])
  mathProblemId String @db.VarChar 
  @@id([username, mathProblemId])
}

model TagMathProblem {
  tag MathProblemTag @relation(fields: [tagId], references: [id])
  tagId Int
  mathProblem MathProblem @relation(fields: [mathProblemId], references: [id])
  mathProblemId String @db.VarChar 
  @@id([tagId, mathProblemId])
}

model GroupPost {
  id String @id 
  content String 
  author User @relation(fields: [authorId], references: [username]) 
  authorId  String
  createdAt DateTime @default(now())
  group Group @relation(fields: [groupId], references: [id])
  groupId String 
  title String
  messages GroupPostMessage[]
}

model ChatMessage { 
  id String @id 
  content String 
  author User @relation(fields : [authorId], references: [username])
  authorId String
  createdAt DateTime @default(now())

  
  referenceMessage Json?
  sessionId String
  chatSession ChatSession @relation(fields: [sessionId], references: [id])
}

model GroupPostMessage {
  id String @id 
  content String 
  author User @relation(fields : [authorId], references: [username])
  authorId String
  createdAt DateTime @default(now())
  referenceMessage Json?
  postId String 
  post GroupPost @relation(fields: [postId], references: [id])
  
}
model ChatSession  {
  id String @id 
  lastMessage Json
  lastUpdate DateTime
  chatMessages ChatMessage[]
  groupId String?
  users ChatSessionUser[]
  type ChatSessionType
  usersInfo Json?
}


model ChatSessionUser { 
  sessionId String 
  username String 
  @@id([sessionId, username])
  chatSession ChatSession @relation(fields: [sessionId], references: [id])
  user User @relation(fields: [username], references: [username])
  @@index([sessionId])
  @@index([username]) 
  unseenCnt Int @default(0)
  joinedAt DateTime 
}

model MathNote {
  creatorId String @db.VarChar
  creator User @relation(fields: [creatorId] , references: [username])
  content String 
  mathProblemId String @db.VarChar
  mathProblem MathProblem @relation(fields: [mathProblemId], references: [id])
  createdAt DateTime @default(now())
  imageLink String?

  @@id([mathProblemId, creatorId])
}

model MathSolution {
  creatorId String @db.VarChar
  creator User @relation(fields: [creatorId] , references: [username])
  content String 
  mathProblemId String @db.VarChar
  mathProblem MathProblem @relation(fields: [mathProblemId], references: [id])
  createdAt DateTime @default(now()) 
  checked Boolean @default(false)
  imageLink String?
  @@id([mathProblemId,creatorId])
}
model Contest{
    id String @id 
    title String @db.VarChar
    description String
    realTimeRank Boolean
    password String?
    ruleType ProblemRuleType

    startTime DateTime 
    duration Int
    endTime DateTime
    createTime DateTime @default(now())
    lastUpdateTime DateTime @default(now())
    visible Boolean @default(true)
    codingProblems CodingProblem[]
}
enum JudgeStatus {
    COMPILE_ERROR 
    WRONG_ANSWER 
    ACCEPTED 
    CPU_TIME_LIMIT_EXCEEDED 
    REAL_TIME_LIMIT_EXCEEDED
    MEMORY_LIMIT_EXCEEDED 
    RUNTIME_ERROR 
    SYSTEM_ERROR 
    PENDING 
    JUDGING 
    PARTIALLY_ACCEPTED 
}


model Submission {
    id String @id 
    contestId String? 
    problemId String
    createTime DateTime
    username String 
    code String
    result JudgeStatus @default(PENDING)
    language String @db.VarChar 
    shared Boolean
    status Json?
    // {time_cost: "", memory_cost: "", err_info: "", score: 0}
    statistic_info Json
}

model ChildSubmission {
  id String @id 
  parentId String
  status Json
  token String 
  languageId Int
}
model Language {
  id Int @id 
  name String @db.VarChar
}

model Testcase {
  id String @id 
  problemId String 
  problem CodingProblem @relation(fields: [problemId], references: [id])
  subTestNumber Int 
  description Json 
}
