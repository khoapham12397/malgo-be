
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.12.0
 * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
 */
Prisma.prismaVersion = {
  client: "4.12.0",
  engine: "659ef412370fa3b41cd7bf6e94587c1dfb7f67e7"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AuthorCodingProblemScalarFieldEnum = makeEnum({
  username: 'username',
  codingProblemId: 'codingProblemId'
});

exports.Prisma.AuthorMathProblemScalarFieldEnum = makeEnum({
  username: 'username',
  mathProblemId: 'mathProblemId'
});

exports.Prisma.ChatMessageScalarFieldEnum = makeEnum({
  id: 'id',
  content: 'content',
  authorId: 'authorId',
  createdAt: 'createdAt',
  referenceMessage: 'referenceMessage',
  sessionId: 'sessionId'
});

exports.Prisma.ChatSessionScalarFieldEnum = makeEnum({
  id: 'id',
  lastMessage: 'lastMessage',
  lastUpdate: 'lastUpdate',
  groupId: 'groupId',
  type: 'type',
  usersInfo: 'usersInfo'
});

exports.Prisma.ChatSessionUserScalarFieldEnum = makeEnum({
  sessionId: 'sessionId',
  username: 'username',
  unseenCnt: 'unseenCnt',
  joinedAt: 'joinedAt'
});

exports.Prisma.ChildSubmissionScalarFieldEnum = makeEnum({
  id: 'id',
  parentId: 'parentId',
  status: 'status',
  token: 'token',
  languageId: 'languageId'
});

exports.Prisma.CodefocesTagProblemScalarFieldEnum = makeEnum({
  problemId: 'problemId',
  codeforcesTagId: 'codeforcesTagId'
});

exports.Prisma.CodeforcesTagScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  parentId: 'parentId'
});

exports.Prisma.CodingProblemCategoryScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.CodingProblemScalarFieldEnum = makeEnum({
  id: 'id',
  code: 'code',
  title: 'title',
  categoryId: 'categoryId',
  link: 'link',
  description: 'description',
  timeLimit: 'timeLimit',
  memoryLimit: 'memoryLimit',
  difficulty: 'difficulty',
  practicePoint: 'practicePoint',
  totalPoint: 'totalPoint',
  submissionNumber: 'submissionNumber',
  acceptedNumber: 'acceptedNumber',
  contestId: 'contestId',
  visibleFrom: 'visibleFrom'
});

exports.Prisma.CodingProblemTagScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.CommentScalarFieldEnum = makeEnum({
  id: 'id',
  threadId: 'threadId',
  parentId: 'parentId',
  rootId: 'rootId',
  totalChildren: 'totalChildren',
  depth: 'depth',
  likes: 'likes',
  parentUsername: 'parentUsername',
  creatorId: 'creatorId',
  published: 'published',
  createdAt: 'createdAt',
  content: 'content'
});

exports.Prisma.ContestScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  description: 'description',
  realTimeRank: 'realTimeRank',
  password: 'password',
  ruleType: 'ruleType',
  startTime: 'startTime',
  duration: 'duration',
  endTime: 'endTime',
  createTime: 'createTime',
  lastUpdateTime: 'lastUpdateTime',
  visible: 'visible'
});

exports.Prisma.FriendRequestScalarFieldEnum = makeEnum({
  id: 'id',
  senderId: 'senderId',
  recieverId: 'recieverId',
  disable: 'disable'
});

exports.Prisma.FriendShipScalarFieldEnum = makeEnum({
  id: 'id',
  username1: 'username1',
  username2: 'username2',
  establishedAt: 'establishedAt'
});

exports.Prisma.GroupPostMessageScalarFieldEnum = makeEnum({
  id: 'id',
  content: 'content',
  authorId: 'authorId',
  createdAt: 'createdAt',
  referenceMessage: 'referenceMessage',
  postId: 'postId'
});

exports.Prisma.GroupPostScalarFieldEnum = makeEnum({
  id: 'id',
  content: 'content',
  authorId: 'authorId',
  createdAt: 'createdAt',
  groupId: 'groupId',
  title: 'title'
});

exports.Prisma.GroupScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  creatorId: 'creatorId',
  generalChatSessionId: 'generalChatSessionId',
  createdAt: 'createdAt'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
});

exports.Prisma.JsonNullValueInput = makeEnum({
  JsonNull: Prisma.JsonNull
});

exports.Prisma.LanguageScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.MathNoteScalarFieldEnum = makeEnum({
  creatorId: 'creatorId',
  content: 'content',
  mathProblemId: 'mathProblemId',
  createdAt: 'createdAt',
  imageLink: 'imageLink'
});

exports.Prisma.MathProblemCategoryScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.MathProblemScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  categoryId: 'categoryId',
  link: 'link',
  description: 'description',
  hint: 'hint',
  difficulty: 'difficulty',
  practicePoint: 'practicePoint',
  totalPoint: 'totalPoint',
  prevProblems: 'prevProblems',
  nextProblems: 'nextProblems',
  numSolution: 'numSolution',
  numCheckedSolution: 'numCheckedSolution'
});

exports.Prisma.MathProblemSetScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  creatorId: 'creatorId',
  numberProb: 'numberProb'
});

exports.Prisma.MathProblemTagScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  parentId: 'parentId',
  nextSibling: 'nextSibling',
  prevSibling: 'prevSibling'
});

exports.Prisma.MathSetProbRelScalarFieldEnum = makeEnum({
  problemId: 'problemId',
  setId: 'setId',
  order: 'order'
});

exports.Prisma.MathSolutionScalarFieldEnum = makeEnum({
  creatorId: 'creatorId',
  content: 'content',
  mathProblemId: 'mathProblemId',
  createdAt: 'createdAt',
  checked: 'checked',
  imageLink: 'imageLink'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SharePTPScalarFieldEnum = makeEnum({
  id: 'id',
  resourceId: 'resourceId',
  resourceType: 'resourceType',
  senderId: 'senderId',
  receiverId: 'receiverId',
  resourceLink: 'resourceLink',
  look: 'look',
  createdAt: 'createdAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.SubmissionScalarFieldEnum = makeEnum({
  id: 'id',
  contestId: 'contestId',
  problemId: 'problemId',
  createTime: 'createTime',
  username: 'username',
  code: 'code',
  result: 'result',
  language: 'language',
  shared: 'shared',
  status: 'status',
  statistic_info: 'statistic_info'
});

exports.Prisma.TagCodingProblemScalarFieldEnum = makeEnum({
  tagId: 'tagId',
  codingProblemId: 'codingProblemId'
});

exports.Prisma.TagMathProblemScalarFieldEnum = makeEnum({
  tagId: 'tagId',
  mathProblemId: 'mathProblemId'
});

exports.Prisma.TestcaseScalarFieldEnum = makeEnum({
  id: 'id',
  problemId: 'problemId',
  subTestNumber: 'subTestNumber',
  description: 'description'
});

exports.Prisma.ThreadCategoryScalarFieldEnum = makeEnum({
  id: 'id',
  parentId: 'parentId',
  title: 'title'
});

exports.Prisma.ThreadScalarFieldEnum = makeEnum({
  id: 'id',
  authorId: 'authorId',
  parentId: 'parentId',
  title: 'title',
  summary: 'summary',
  published: 'published',
  createdAt: 'createdAt',
  lastUpdateAt: 'lastUpdateAt',
  publishedAt: 'publishedAt',
  content: 'content',
  totalComments: 'totalComments',
  totalRootComments: 'totalRootComments',
  likes: 'likes',
  views: 'views',
  categoryId: 'categoryId'
});

exports.Prisma.ThreadTagRelScalarFieldEnum = makeEnum({
  threadId: 'threadId',
  tagId: 'tagId'
});

exports.Prisma.ThreadTagScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserGroupRelScalarFieldEnum = makeEnum({
  username: 'username',
  groupId: 'groupId',
  joinedAt: 'joinedAt'
});

exports.Prisma.UserLikeCommentScalarFieldEnum = makeEnum({
  username: 'username',
  commentId: 'commentId',
  disable: 'disable'
});

exports.Prisma.UserLikeThreadScalarFieldEnum = makeEnum({
  username: 'username',
  threadId: 'threadId',
  disable: 'disable'
});

exports.Prisma.UserProfileScalarFieldEnum = makeEnum({
  id: 'id',
  real_name: 'real_name',
  avatar: 'avatar',
  blog: 'blog',
  github: 'github',
  school: 'school',
  major: 'major',
  language: 'language',
  accepted_number: 'accepted_number',
  total_score: 'total_score',
  total_practice_score: 'total_practice_score',
  submission_number: 'submission_number',
  rating: 'rating',
  username: 'username'
});

exports.Prisma.UserRatingScalarFieldEnum = makeEnum({
  username: 'username',
  rating: 'rating'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  username: 'username',
  email: 'email',
  create_time: 'create_time',
  admin_type: 'admin_type',
  is_disabled: 'is_disabled',
  auth0_id: 'auth0_id'
});
exports.ChatSessionType = makeEnum({
  p2p: 'p2p',
  group: 'group'
});

exports.JudgeStatus = makeEnum({
  COMPILE_ERROR: 'COMPILE_ERROR',
  WRONG_ANSWER: 'WRONG_ANSWER',
  ACCEPTED: 'ACCEPTED',
  CPU_TIME_LIMIT_EXCEEDED: 'CPU_TIME_LIMIT_EXCEEDED',
  REAL_TIME_LIMIT_EXCEEDED: 'REAL_TIME_LIMIT_EXCEEDED',
  MEMORY_LIMIT_EXCEEDED: 'MEMORY_LIMIT_EXCEEDED',
  RUNTIME_ERROR: 'RUNTIME_ERROR',
  SYSTEM_ERROR: 'SYSTEM_ERROR',
  PENDING: 'PENDING',
  JUDGING: 'JUDGING',
  PARTIALLY_ACCEPTED: 'PARTIALLY_ACCEPTED'
});

exports.ProblemRuleType = makeEnum({
  acm: 'acm',
  oi: 'oi'
});

exports.admin_type = makeEnum({
  regular_user: 'regular_user',
  admin: 'admin',
  super_admin: 'super_admin'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  UserRating: 'UserRating',
  FriendShip: 'FriendShip',
  FriendRequest: 'FriendRequest',
  SharePTP: 'SharePTP',
  Group: 'Group',
  UserGroupRel: 'UserGroupRel',
  UserProfile: 'UserProfile',
  CodingProblemCategory: 'CodingProblemCategory',
  CodingProblemTag: 'CodingProblemTag',
  CodeforcesTag: 'CodeforcesTag',
  CodefocesTagProblem: 'CodefocesTagProblem',
  CodingProblem: 'CodingProblem',
  AuthorCodingProblem: 'AuthorCodingProblem',
  TagCodingProblem: 'TagCodingProblem',
  Thread: 'Thread',
  ThreadCategory: 'ThreadCategory',
  ThreadTag: 'ThreadTag',
  ThreadTagRel: 'ThreadTagRel',
  UserLikeThread: 'UserLikeThread',
  UserLikeComment: 'UserLikeComment',
  Comment: 'Comment',
  MathProblemCategory: 'MathProblemCategory',
  MathProblemTag: 'MathProblemTag',
  MathProblem: 'MathProblem',
  MathProblemSet: 'MathProblemSet',
  MathSetProbRel: 'MathSetProbRel',
  AuthorMathProblem: 'AuthorMathProblem',
  TagMathProblem: 'TagMathProblem',
  GroupPost: 'GroupPost',
  ChatMessage: 'ChatMessage',
  GroupPostMessage: 'GroupPostMessage',
  ChatSession: 'ChatSession',
  ChatSessionUser: 'ChatSessionUser',
  MathNote: 'MathNote',
  MathSolution: 'MathSolution',
  Contest: 'Contest',
  Submission: 'Submission',
  ChildSubmission: 'ChildSubmission',
  Language: 'Language',
  Testcase: 'Testcase'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
